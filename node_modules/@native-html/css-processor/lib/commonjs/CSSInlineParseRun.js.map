{"version":3,"sources":["CSSInlineParseRun.ts"],"names":["CSSInlineParseRun","CSSParseRun","constructor","inlineCSS","registry","rules","parseInlineCSS","normalizeProp","bind","reduceProps","split","map","prop","reduce","acc","length","trim","rule","strict","rawName","rawValue","camelCaseName","validationMap","shouldRegisterInlineProperty","validator","getValidatorForProperty","normalizedValue","normalizeInlineCSSValue","TypeError","reg","ShortMergeRequest","r","e","fillProcessedProps","rawTransformed","Object","keys","forEach","value","processedProps","withProperty"],"mappings":"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","sourcesContent":["import { getPropertyName } from 'css-to-react-native';\nimport { CSSParseRun } from './CSSParseRun';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { ValidatorsType } from './makepropertiesValidators';\nimport { CSSProperties } from './processor-types';\nimport { ShortMergeRequest } from './ShortMergeRequest';\nimport { LongCSSPropertyValidator } from './validators/LongCSSPropertyValidator';\n\ntype CSSRawPropertiesList = [string, any][];\n\nexport class CSSInlineParseRun extends CSSParseRun {\n  private rules: CSSRawPropertiesList;\n\n  constructor(inlineCSS: string, registry: CSSPropertiesValidationRegistry) {\n    super(registry);\n    this.rules = this.parseInlineCSS(inlineCSS);\n    this.normalizeProp = this.normalizeProp.bind(this);\n    this.reduceProps = this.reduceProps.bind(this);\n  }\n\n  private parseInlineCSS(inlineCSS: string): CSSRawPropertiesList {\n    return inlineCSS\n      .split(';')\n      .map((prop) => prop.split(':'))\n      .reduce<CSSRawPropertiesList>((acc, prop) => {\n        if (prop.length === 2) {\n          return [...acc, [prop[0].trim(), prop[1].trim()]];\n        }\n        return acc;\n      }, []);\n  }\n\n  normalizeProp(\n    rule: CSSRawPropertiesList[number],\n    strict = false\n  ): null | [keyof ValidatorsType, any] {\n    const rawName = rule[0];\n    const rawValue = rule[1];\n    const camelCaseName = getPropertyName(rawName);\n    if (!this.validationMap.shouldRegisterInlineProperty(camelCaseName)) {\n      return null;\n    }\n    const validator = this.validationMap.getValidatorForProperty(camelCaseName);\n    const normalizedValue = validator.normalizeInlineCSSValue(rawValue);\n    if (normalizedValue === null) {\n      if (strict) {\n        throw new TypeError();\n      }\n      return null;\n    }\n    return [camelCaseName, normalizedValue];\n  }\n\n  reduceProps(\n    reg: CSSProperties,\n    rule: null | [keyof ValidatorsType, Exclude<any, null>]\n  ): CSSProperties {\n    if (!rule) {\n      return reg;\n    }\n    const [camelCaseName, normalizedValue] = rule;\n    if (normalizedValue instanceof ShortMergeRequest) {\n      try {\n        return normalizedValue\n          .map((r) => this.normalizeProp(r, true))\n          .reduce(this.reduceProps, reg);\n      } catch (e) {\n        return reg;\n      }\n    }\n    return {\n      ...reg,\n      [camelCaseName]: normalizedValue\n    };\n  }\n\n  fillProcessedProps() {\n    const rawTransformed = this.rules\n      .map((r) => this.normalizeProp(r))\n      .reduce(this.reduceProps, {});\n    (Object.keys(rawTransformed) as Array<keyof ValidatorsType>).forEach(\n      (camelCaseName) => {\n        const value = rawTransformed[camelCaseName];\n        const validator = this.validationMap.getValidatorForProperty(\n          camelCaseName\n        ) as LongCSSPropertyValidator;\n        const normalizedValue = validator.normalizeInlineCSSValue(value);\n        this.processedProps.withProperty(\n          camelCaseName as keyof MixedStyleDeclaration,\n          normalizedValue,\n          validator\n        );\n      }\n    );\n  }\n}\n"]}