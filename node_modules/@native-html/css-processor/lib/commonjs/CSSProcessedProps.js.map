{"version":3,"sources":["CSSProcessedProps.ts"],"names":["compatCategories","displayCategories","propagationCategories","CSSProcessedProps","constructor","native","newCompatCategory","web","block","retain","emptyProps","flow","text","withProperty","propertyName","propertyValue","compatCategory","displayCategory","propagationCategory","target","merge","overriders","filtered","filter","isNotEmpty","next","compat","display","propagation","map","o","new"],"mappings":";;;;;;;AAGA;;AACA;;;;;;AAmBA,MAAMA,gBAA0D,GAAG,CACjE,QADiE,EAEjE,KAFiE,CAAnE;AAIA,MAAMC,iBAA4D,GAAG,CACnE,MADmE,EAEnE,OAFmE,CAArE;AAIA,MAAMC,qBAAoE,GAAG,CAC3E,MAD2E,EAE3E,QAF2E,CAA7E;AAKA;AACA;AACA;AACA;AACA;;AACO,MAAMC,iBAAN,CAEP;AAqCEC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AACZ,SAAKC,MAAL,GAAc,KAAKC,iBAAL,EAAd;AACA,SAAKC,GAAL,GAAW,KAAKD,iBAAL,EAAX;AACD;;AAEOA,EAAAA,iBAAiB,GAEC;AACxB,WAAO;AACLE,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAEC,sBADH;AAELC,QAAAA,IAAI,EAAED;AAFD,OADF;AAKLE,MAAAA,IAAI,EAAE;AACJH,QAAAA,MAAM,EAAEC,sBADJ;AAEJC,QAAAA,IAAI,EAAED;AAFF;AALD,KAAP;AAUD;;AAEMG,EAAAA,YAAY,CACjBC,YADiB,EAEjBC,aAFiB,EAGjB;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,eAAlB;AAAmCC,IAAAA;AAAnC,GAHiB,EAIjB;AACA,QAAIH,aAAa,KAAK,IAAtB,EAA4B;AAC1B,YAAMI,MAAM,GAAG,KAAKH,cAAL,EAAqBC,eAArB,EAAsCC,mBAAtC,CAAf;;AACA,UAAI,CAAC,4BAAWC,MAAX,CAAL,EAAyB;AACvB,aAAKH,cAAL,EAAqBC,eAArB,EAAsCC,mBAAtC,IAA6D,EAA7D;AACD,OAJyB,CAK1B;;;AACA,WAAKF,cAAL,EAAqBC,eAArB,EAAsCC,mBAAtC,EAA2DJ,YAA3D,IACEC,aADF;AAED;;AACD,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACSK,EAAAA,KAAK,CAAC,GAAGC,UAAJ,EAAiD;AAC3D,UAAMC,QAAQ,GAAGD,UAAU,CAACE,MAAX,CAAkBC,sBAAlB,CAAjB;AACA,UAAMC,IAAI,GAAG,IAAItB,iBAAJ,EAAb;;AACA,SAAK,MAAMuB,MAAX,IAAqB1B,gBAArB,EAAuC;AACrC,WAAK,MAAM2B,OAAX,IAAsB1B,iBAAtB,EAAyC;AACvC,aAAK,MAAM2B,WAAX,IAA0B1B,qBAA1B,EAAiD;AAC/CuB,UAAAA,IAAI,CAACC,MAAD,CAAJ,CAAaC,OAAb,EAAsBC,WAAtB,IAAqC,yBAAW,CAC9C,KAAKF,MAAL,EAAaC,OAAb,EAAsBC,WAAtB,CAD8C,EAE9C,GAAGN,QAAQ,CAACO,GAAT,CAAcC,CAAD,IAAOA,CAAC,CAACJ,MAAD,CAAD,CAAUC,OAAV,EAAmBC,WAAnB,CAApB,CAF2C,CAAX,CAArC;AAID;AACF;AACF;;AACD,WAAOH,IAAP;AACD;;AAES,SAAHM,GAAG,GAAG;AACX,WAAO,IAAI5B,iBAAJ,EAAP;AACD;;AAnGH","sourcesContent":["import { CSSProperties } from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { emptyProps, isNotEmpty } from './emptyProps';\nimport mergeProps from './mergeProps';\nimport {\n  CSSPropertyCompatCategory,\n  CSSDisplayRegistry,\n  WebTextFlowProperties,\n  CSSPropertySpecs,\n  CSSPropertyDisplayCategory,\n  CSSPropertyPropagationCategory\n} from './processor-types';\nimport {\n  CSSLongNativeTranslatableBlockFlowedPropKey,\n  CSSLongNativeTranslatableBlockRetainedPropKey,\n  CSSLongNativeTranslatableTextFlowedPropKey,\n  CSSLongNativeTranslatableTextRetainedPropKey,\n  CSSLongNativeUntranslatableBlockFlowedPropKey,\n  CSSLongNativeUntranslatableBlockPropKey,\n  CSSLongWebTextRetainedPropKey\n} from './property-types';\n\nconst compatCategories: ReadonlyArray<CSSPropertyCompatCategory> = [\n  'native',\n  'web'\n];\nconst displayCategories: ReadonlyArray<CSSPropertyDisplayCategory> = [\n  'text',\n  'block'\n];\nconst propagationCategories: ReadonlyArray<CSSPropertyPropagationCategory> = [\n  'flow',\n  'retain'\n];\n\n/**\n * An object representing categorized style props. Props are categorized\n * depending on their inheritability (flow, retain), target (block, text)\n * and (react) native support (native, web).\n */\nexport class CSSProcessedProps\n  implements Record<CSSPropertyCompatCategory, CSSDisplayRegistry>\n{\n  readonly native: {\n    text: {\n      flow: Partial<\n        Pick<TextStyle, CSSLongNativeTranslatableTextFlowedPropKey>\n      >;\n      retain: Partial<\n        Pick<TextStyle, CSSLongNativeTranslatableTextRetainedPropKey>\n      >;\n    };\n    block: {\n      flow: Partial<\n        Pick<ViewStyle, CSSLongNativeTranslatableBlockFlowedPropKey>\n      >;\n      retain: Partial<\n        Pick<ViewStyle, CSSLongNativeTranslatableBlockRetainedPropKey>\n      >;\n    };\n  };\n  readonly web: {\n    text: {\n      flow: Partial<WebTextFlowProperties> & CSSProperties;\n      retain: Partial<Record<CSSLongWebTextRetainedPropKey, any>> &\n        CSSProperties;\n    };\n    block: {\n      flow: Partial<\n        Pick<ViewStyle, CSSLongNativeUntranslatableBlockFlowedPropKey>\n      > &\n        CSSProperties;\n      retain: Partial<\n        Pick<ViewStyle, CSSLongNativeUntranslatableBlockPropKey>\n      > &\n        CSSProperties;\n    };\n  };\n\n  constructor() {\n    this.native = this.newCompatCategory<'native'>();\n    this.web = this.newCompatCategory<'web'>();\n  }\n\n  private newCompatCategory<\n    T extends CSSPropertyCompatCategory\n  >(): CSSProcessedProps[T] {\n    return {\n      block: {\n        retain: emptyProps,\n        flow: emptyProps\n      },\n      text: {\n        retain: emptyProps,\n        flow: emptyProps\n      }\n    };\n  }\n\n  public withProperty<K extends keyof MixedStyleDeclaration>(\n    propertyName: K,\n    propertyValue: MixedStyleDeclaration[K],\n    { compatCategory, displayCategory, propagationCategory }: CSSPropertySpecs\n  ) {\n    if (propertyValue !== null) {\n      const target = this[compatCategory][displayCategory][propagationCategory];\n      if (!isNotEmpty(target)) {\n        this[compatCategory][displayCategory][propagationCategory] = {};\n      }\n      //@ts-ignore\n      this[compatCategory][displayCategory][propagationCategory][propertyName] =\n        propertyValue;\n    }\n    return this;\n  }\n\n  /**\n   * Create a new processed prop object by merging the 'overriders' parameters\n   * into this object.\n   *\n   * @param overriders - The processed props which will be merged into this\n   * processed prop. Rightmost props will override leftmost props.\n   */\n  public merge(...overriders: Array<CSSProcessedProps | null>) {\n    const filtered = overriders.filter(isNotEmpty);\n    const next = new CSSProcessedProps();\n    for (const compat of compatCategories) {\n      for (const display of displayCategories) {\n        for (const propagation of propagationCategories) {\n          next[compat][display][propagation] = mergeProps([\n            this[compat][display][propagation],\n            ...filtered.map((o) => o[compat][display][propagation])\n          ]);\n        }\n      }\n    }\n    return next;\n  }\n\n  static new() {\n    return new CSSProcessedProps();\n  }\n}\n"]}