{"version":3,"sources":["emptyProps.ts"],"names":["emptySymbol","Symbol","emptyProps","obj","Object","defineProperty","value","enumerable","freeze","isNotEmpty","p","$$empty"],"mappings":";;;;;;;AAAA,MAAMA,WAAW,GAAGC,MAAM,CAAC,YAAD,CAA1B;;AAIO,MAAMC,UAAU,GAAI,YAAY;AACrC,MAAIC,GAAG,GAAG,EAAV;AACAC,EAAAA,MAAM,CAACC,cAAP,CAAsBF,GAAtB,EAA2B,SAA3B,EAAsC;AACpCG,IAAAA,KAAK,EAAEN,WAD6B;AAEpCO,IAAAA,UAAU,EAAE;AAFwB,GAAtC;AAIAJ,EAAAA,GAAG,GAAGC,MAAM,CAACI,MAAP,CAAcL,GAAd,CAAN;AACA,SAAOA,GAAP;AACD,CARyB,EAAnB;;;;AAYA,SAASM,UAAT,CAAuBC,CAAvB,EAAiE;AACtE;AACA,SAAO,CAAC,CAACA,CAAF,IAAOA,CAAC,CAACC,OAAF,KAAcX,WAA5B;AACD","sourcesContent":["const emptySymbol = Symbol('emptyProps');\n\nexport type EmptyProps = typeof emptyProps;\n\nexport const emptyProps = (function () {\n  let obj = {};\n  Object.defineProperty(obj, '$$empty', {\n    value: emptySymbol,\n    enumerable: false\n  });\n  obj = Object.freeze(obj);\n  return obj;\n})() as {\n  $$empty: symbol;\n};\n\nexport function isNotEmpty<T>(p: T): p is Exclude<T, EmptyProps | null> {\n  //@ts-ignore\n  return !!p && p.$$empty !== emptySymbol;\n}\n"]}