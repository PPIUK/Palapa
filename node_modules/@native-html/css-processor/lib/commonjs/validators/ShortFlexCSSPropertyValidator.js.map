{"version":3,"sources":["ShortFlexCSSPropertyValidator.ts"],"names":["ShortFlexCSSPropertyValidator","ShortCSSPropertyValidator","constructor","params","propertyName","normalizeInlineCSSValue","value","ShortMergeRequest","normalizeNativeValue"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAGA;AACA;AACA;AACA;AACA;AACO,MAAMA,6BAAN,SAA4CC,oDAA5C,CAGL;AACAC,EAAAA,WAAW,CAACC,MAAD,EAAuD;AAChE,UAAM,EAAE,GAAGA,MAAL;AAAaC,MAAAA,YAAY,EAAE;AAA3B,KAAN;AACD;;AAEDC,EAAAA,uBAAuB,CAACC,KAAD,EAAgB;AACrC,WAAO,IAAIC,oCAAJ,CAAsB,4BAAc,KAAKH,YAAnB,EAAiCE,KAAjC,CAAtB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,oBAAoB,CAACF,KAAD,EAAgB;AAClC,WAAOA,KAAP;AACD;;AArBD","sourcesContent":["import { ShortMergeRequest } from '../ShortMergeRequest';\nimport expandCSSToRN from './expandCSSToRN';\nimport { ShortCSSPropertyValidator } from './ShortCSSPropertyValidator';\nimport { CSSPropertyValidatorParams, CSSPropertyModel } from './types';\n\n/**\n * Flex shorthand property in CSS and React Native differ significantly. This\n * validator must therefore expand this shorthand in a way consistent with the\n * specs for both platforms (native and CSS).\n */\nexport class ShortFlexCSSPropertyValidator extends ShortCSSPropertyValidator<\n  CSSPropertyModel,\n  number\n> {\n  constructor(params: CSSPropertyValidatorParams<CSSPropertyModel>) {\n    super({ ...params, propertyName: 'flex' });\n  }\n\n  normalizeInlineCSSValue(value: string) {\n    return new ShortMergeRequest(expandCSSToRN(this.propertyName, value));\n  }\n\n  /**\n   * In React Native, \"flex\" is not a shorthand property, although it looks\n   * like one. There is not always a tuple of (flexGrow, flexShrink,\n   * flexBasis) that maps exactly to one single \"flex\" value.\n   *\n   * For this very reason, it is ill-advised to use \"flex\" shorthand property.\n   * Use the longhand equivalent when that is possible.\n   *\n   * @param value\n   */\n  normalizeNativeValue(value: number) {\n    return value;\n  }\n}\n"]}