{"version":3,"sources":["LongFloatNumberCSSPropertyValidator.ts"],"names":["LongFloatNumberCSSPropertyValidator","LongCSSPropertyValidator","normalizeRawInlineCSSValue","value","normalizedVal","Number","isNaN","normalizeNativeValue","v","normalizeInlineCSSValue"],"mappings":";;;;;;;AAAA;;AAGO,MAAMA,mCAAN,SAEGC,kDAFH,CAEuC;AAC5CC,EAAAA,0BAA0B,CAACC,KAAD,EAA+B;AACvD,UAAMC,aAAa,GAAGC,MAAM,CAACF,KAAD,CAA5B;;AACA,QAAIE,MAAM,CAACC,KAAP,CAAaF,aAAb,CAAJ,EAAiC;AAC/B,aAAO,IAAP;AACD;;AACD,WAAOA,aAAP;AACD;;AAEDG,EAAAA,oBAAoB,CAACC,CAAD,EAAoC;AACtD,WAAO,KAAKC,uBAAL,CAA6BD,CAA7B,CAAP;AACD;;AAX2C","sourcesContent":["import { LongCSSPropertyValidator } from './LongCSSPropertyValidator';\nimport { CSSPropertyModel } from './types';\n\nexport class LongFloatNumberCSSPropertyValidator<\n  C extends CSSPropertyModel\n> extends LongCSSPropertyValidator<C, number> {\n  normalizeRawInlineCSSValue(value: string): number | null {\n    const normalizedVal = Number(value);\n    if (Number.isNaN(normalizedVal)) {\n      return null;\n    }\n    return normalizedVal;\n  }\n\n  normalizeNativeValue(v: string | number): number | null {\n    return this.normalizeInlineCSSValue(v);\n  }\n}\n"]}