{"version":3,"sources":["ShortCardinalCSSPropertyValidator.ts"],"names":["WHITESPACE_REGEX","ShortCardinalCSSpropertyValidator","ShortCSSPropertyValidator","constructor","params","directions","normalizeInlineCSSValue","value","ShortMergeRequest","top","right","bottom","left","values","split","length","normalizeNativeValue"],"mappings":"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","sourcesContent":["import { ShortMergeRequest } from '../ShortMergeRequest';\nimport { ShortCSSPropertyValidator } from './ShortCSSPropertyValidator';\nimport { CSSPropertyModel, ShortCSSPropertyValidatorParams } from './types';\n\nexport type Directions = {\n  top: string;\n  bottom: string;\n  left: string;\n  right: string;\n};\n\nconst WHITESPACE_REGEX = /\\s+/;\n\nexport class ShortCardinalCSSpropertyValidator<\n  C extends CSSPropertyModel = any\n> extends ShortCSSPropertyValidator<C> {\n  public directions: Readonly<Directions>;\n  constructor(\n    params: ShortCSSPropertyValidatorParams<C>,\n    /**\n     * Top, Right, Bottom, Left\n     */\n    directions: Readonly<Directions>\n  ) {\n    super(params);\n    this.directions = directions;\n  }\n\n  normalizeInlineCSSValue(value: string | number) {\n    if (typeof value === 'number') {\n      return new ShortMergeRequest({\n        [this.directions.top]: value,\n        [this.directions.right]: value,\n        [this.directions.bottom]: value,\n        [this.directions.left]: value\n      });\n    }\n    const values = value.split(WHITESPACE_REGEX);\n    if (values.length === 4) {\n      return new ShortMergeRequest({\n        [this.directions.top]: values[0],\n        [this.directions.right]: values[1],\n        [this.directions.bottom]: values[2],\n        [this.directions.left]: values[3]\n      });\n    }\n    if (values.length === 3) {\n      return new ShortMergeRequest({\n        [this.directions.top]: values[0],\n        [this.directions.right]: values[1],\n        [this.directions.bottom]: values[2],\n        [this.directions.left]: values[1]\n      });\n    }\n    if (values.length === 2) {\n      return new ShortMergeRequest({\n        [this.directions.top]: values[0],\n        [this.directions.right]: values[1],\n        [this.directions.bottom]: values[0],\n        [this.directions.left]: values[1]\n      });\n    }\n    if (values.length === 1) {\n      return new ShortMergeRequest({\n        [this.directions.top]: values[0],\n        [this.directions.right]: values[0],\n        [this.directions.bottom]: values[0],\n        [this.directions.left]: values[0]\n      });\n    }\n    return null;\n  }\n\n  normalizeNativeValue(value: string | number) {\n    return this.normalizeInlineCSSValue(value);\n  }\n}\n"]}