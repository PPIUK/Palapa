{"version":3,"sources":["ShortFontCSSValidator.ts"],"names":["WHITESPACE_REGEX","ShortFontCSSValidator","ShortCSSToReactNativeValidator","normalizeInlineCSSValue","value","resp","split","fontFamily","length","base","splice","font","normalizedFont","isFontSupported","config","slice","join"],"mappings":";;;;;;;AAAA;;AACA;;;;AAIA,MAAMA,gBAAgB,GAAG,KAAzB;;AAEO,MAAMC,qBAAN,SAEGC,8DAFH,CAEqC;AAC1CC,EAAAA,uBAAuB,CAACC,KAAD,EAA0C;AAC/D;AACA;AACA,UAAMC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAb;AACA,QAAIC,UAAU,GAAG,IAAjB;;AACA,QAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB,aAAO,MAAML,uBAAN,CAA8BE,IAAI,CAAC,CAAD,CAAlC,CAAP;AACD;;AACD,UAAMI,IAAI,GAAGJ,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAb;;AACA,SAAK,MAAMC,IAAX,IAAmBN,IAAnB,EAAyB;AACvB,YAAMO,cAAc,GAAG,gCAAkBD,IAAlB,CAAvB;AACA,YAAME,eAAe,GAAG,KAAKC,MAAL,CAAYD,eAAZ,CAA4BD,cAA5B,CAAxB;;AACA,UAAIC,eAAJ,EAAqB;AACnBN,QAAAA,UAAU,GACR,OAAOM,eAAP,KAA2B,QAA3B,GACIA,eADJ,GAEID,cAHN;AAIA;AACD;AACF;;AACD,WAAO,MAAMT,uBAAN,CACLM,IAAI,CAACH,KAAL,CAAWN,gBAAX,EAA6Be,KAA7B,CAAmC,CAAnC,EAAsC,CAAC,CAAvC,EAA0CC,IAA1C,CAA+C,GAA/C,IACE,GADF,IAEGT,UAAU,IAAI,QAFjB,CADK,CAAP;AAKD;;AA1ByC","sourcesContent":["import { ShortCSSToReactNativeValidator } from './ShortCSSToReactNativeValidator';\nimport normalizeFontName from './normalizeFontName';\nimport { CSSPropertyModel } from './types';\nimport { ShortMergeRequest } from '../ShortMergeRequest';\n\nconst WHITESPACE_REGEX = /\\s+/;\n\nexport class ShortFontCSSValidator<\n  C extends CSSPropertyModel\n> extends ShortCSSToReactNativeValidator<C> {\n  normalizeInlineCSSValue(value: string): ShortMergeRequest | null {\n    // A 'font' declaration may end with a list of multiple font families.\n    // We must check support for this list before processing.\n    const resp = value.split(',');\n    let fontFamily = null;\n    if (resp.length === 1) {\n      return super.normalizeInlineCSSValue(resp[0]);\n    }\n    const base = resp.splice(0, 1)[0];\n    for (const font of resp) {\n      const normalizedFont = normalizeFontName(font);\n      const isFontSupported = this.config.isFontSupported(normalizedFont);\n      if (isFontSupported) {\n        fontFamily =\n          typeof isFontSupported === 'string'\n            ? isFontSupported\n            : normalizedFont;\n        break;\n      }\n    }\n    return super.normalizeInlineCSSValue(\n      base.split(WHITESPACE_REGEX).slice(0, -1).join(' ') +\n        ' ' +\n        (fontFamily || 'system')\n    );\n  }\n}\n"]}