{"version":3,"sources":["LongSizeCSSPropertyValidator.ts"],"names":["LongSizeCSSPropertyValidator","LongCSSPropertyValidator","computeSize","value","unit","config","absoluteLengthUnitsMultiplicators","computeEmSize","rootFontSize","splitValueAndUnit","match","exec","Number","normalizeRawInlineCSSValue","split","normalizeNativeValue","normalizeInlineCSSValue"],"mappings":";;;;;;;AACA;;AAGO,MAAMA,4BAAN,SAEGC,kDAFH,CAEgD;AAC3CC,EAAAA,WAAW,CACnBC,KADmB,EAEnBC,IAFmB,EAGK;AACxB,YAAQA,IAAR;AACE,WAAK,GAAL;AACE,eAAQ,GAAED,KAAM,GAAhB;;AACF,WAAK,IAAL;AACE,eAAOA,KAAP;;AACF,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACA,WAAK,IAAL;AACE,eAAOA,KAAK,GAAG,KAAKE,MAAL,CAAYC,iCAAZ,CAA8CF,IAA9C,CAAf;;AACF,WAAK,IAAL;AACE,eAAO,KAAKG,aAAL,CAAmBJ,KAAnB,CAAP;;AACF,WAAK,IAAL;AACE;AACA,eAAO,KAAKI,aAAL,CAAmBJ,KAAK,GAAG,IAA3B,CAAP;;AACF,WAAK,KAAL;AACE,eAAO,KAAKE,MAAL,CAAYG,YAAZ,GAA2BL,KAAlC;AAjBJ;;AAmBA,WAAO,IAAP;AACD;;AAESI,EAAAA,aAAa,CAACJ,KAAD,EAAgB;AACrC,WAAO,KAAKE,MAAL,CAAYG,YAAZ,GAA2BL,KAAlC;AACD;;AAESM,EAAAA,iBAAiB,CAACN,KAAD,EAAgD;AACzE,UAAMO,KAAK,GACT,sEAAsEC,IAAtE,CACER,KADF,CADF;;AAIA,QAAIO,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,CAACE,MAAM,CAACF,KAAK,CAAC,CAAD,CAAN,CAAP,EAAmBA,KAAK,CAAC,CAAD,CAAxB,CAAP;AACD;;AAEDG,EAAAA,0BAA0B,CAACV,KAAD,EAAgB;AACxC,QAAIA,KAAK,KAAK,GAAd,EAAmB;AACjB,aAAO,CAAP;AACD;;AACD,QAAIA,KAAK,KAAK,MAAd,EAAsB;AACpB,aAAOA,KAAP;AACD;;AACD,UAAMW,KAAK,GAAG,KAAKL,iBAAL,CAAuBN,KAAvB,CAAd;;AACA,QAAIW,KAAJ,EAAW;AACT,aAAO,KAAKZ,WAAL,CAAiBY,KAAK,CAAC,CAAD,CAAtB,EAA2BA,KAAK,CAAC,CAAD,CAAhC,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDC,EAAAA,oBAAoB,CAACZ,KAAD,EAAyB;AAC3C,WAAO,KAAKa,uBAAL,CAA6Bb,KAA7B,CAAP;AACD;;AA1DoD","sourcesContent":["import { CSSLengthUnit } from '../config';\nimport { LongCSSPropertyValidator } from './LongCSSPropertyValidator';\nimport { CSSPropertyModel } from './types';\n\nexport class LongSizeCSSPropertyValidator<\n  C extends CSSPropertyModel\n> extends LongCSSPropertyValidator<C, number | string> {\n  protected computeSize(\n    value: number,\n    unit: CSSLengthUnit\n  ): number | string | null {\n    switch (unit) {\n      case '%':\n        return `${value}%`;\n      case 'px':\n        return value;\n      case 'cm':\n      case 'in':\n      case 'mm':\n      case 'pc':\n      case 'pt':\n        return value * this.config.absoluteLengthUnitsMultiplicators[unit];\n      case 'em':\n        return this.computeEmSize(value);\n      case 'ex':\n        // This is an approximation.\n        return this.computeEmSize(value * 0.63);\n      case 'rem':\n        return this.config.rootFontSize * value;\n    }\n    return null;\n  }\n\n  protected computeEmSize(value: number) {\n    return this.config.rootFontSize * value;\n  }\n\n  protected splitValueAndUnit(value: string): [number, CSSLengthUnit] | null {\n    const match =\n      /^(\\d*\\.?\\d*)\\s*(cm|mm|in|px|pt|pc|em|ex|ch|rem|vw|vh|vmin|vmax|%)$/g.exec(\n        value\n      );\n    if (match === null) {\n      return null;\n    }\n    return [Number(match[1]), match[2] as CSSLengthUnit];\n  }\n\n  normalizeRawInlineCSSValue(value: string) {\n    if (value === '0') {\n      return 0;\n    }\n    if (value === 'auto') {\n      return value;\n    }\n    const split = this.splitValueAndUnit(value);\n    if (split) {\n      return this.computeSize(split[0], split[1]);\n    }\n    return null;\n  }\n\n  normalizeNativeValue(value: string | number) {\n    return this.normalizeInlineCSSValue(value);\n  }\n}\n"]}