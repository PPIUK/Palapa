{"version":3,"sources":["LongCSSPropertyValidator.ts"],"names":["LongCSSPropertyValidator","GenericCSSPropertyValidator","constructor","params","normalizeInlineCSSValue","value","normalizeRawInlineCSSValue","normalizeNativeValue"],"mappings":";;;;;;;AAAA;;AAGO,MAAeA,wBAAf,SAGGC,qDAHH,CAGkC;AACvCC,EAAAA,WAAW,CAACC,MAAD,EAAwC;AACjD,UAAMA,MAAN,EAAc,KAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,uBAAuB,CAACC,KAAD,EAA8B;AACnD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,KAAP;AACD;;AACD,WAAO,KAAKC,0BAAL,CAAgCD,KAAhC,CAAP;AACD;;AAID;AACF;AACA;AACA;AACA;AACEE,EAAAA,oBAAoB,CAACF,KAAD,EAAqB;AACvC,WAAOA,KAAP;AACD;;AA3BsC","sourcesContent":["import { GenericCSSPropertyValidator } from './GenericPropertyValidator';\nimport { CSSPropertyValidatorParams, CSSPropertyModel } from './types';\n\nexport abstract class LongCSSPropertyValidator<\n  C extends CSSPropertyModel = any,\n  N = any\n> extends GenericCSSPropertyValidator<C> {\n  constructor(params: CSSPropertyValidatorParams<C>) {\n    super(params, false);\n  }\n\n  /**\n   * Normalize a rule value from inline CSS styles.\n   *\n   * @param value - The CSS property value to test.\n   * @returns The normalized value, or null if normalization failed.\n   */\n  normalizeInlineCSSValue(value: N | string): N | null {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    return this.normalizeRawInlineCSSValue(value);\n  }\n\n  abstract normalizeRawInlineCSSValue(value: string): N | null;\n\n  /**\n   * Normalize a mixed value from a @{link MixedStyleDeclaration}.\n   *\n   * @param value\n   */\n  normalizeNativeValue(value: N): N | null {\n    return value;\n  }\n}\n"]}