{"version":3,"sources":["CSSPropertiesValidationRegistry.ts"],"names":["makeRegistry","list","registry","forEach","prop","CSSPropertiesValidationRegistry","constructor","config","validators","ignoredPropertiesRegistry","inlinePropertiesBlacklist","allowedPropertiesRegistry","inlinePropertiesWhitelist","isInlinePropertyAllowed","name","shouldRegisterInlineProperty","getValidatorForProperty"],"mappings":";;;;;;;AACA;;;;;;AAKA,SAASA,YAAT,CAAsBC,IAAtB,EAAiD;AAC/C,QAAMC,QAAQ,GAAG,EAAjB;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,IAAD,IAAU;AACrBF,IAAAA,QAAQ,CAACE,IAAD,CAAR,GAAiB,IAAjB;AACD,GAFD;AAGA,SAAOF,QAAP;AACD;;AAEM,MAAMG,+BAAN,CAAsC;AAO3CC,EAAAA,WAAW,CAACC,MAAD,EAA6B;AAAA;;AAAA;;AAAA;;AACtC,SAAKC,UAAL,GAAkB,uCAAyBD,MAAzB,CAAlB;AACA,SAAKE,yBAAL,GAAiCT,YAAY,CAC3CO,MAAM,CAACG,yBADoC,CAA7C;AAGA,SAAKC,yBAAL,GAAiCJ,MAAM,CAACK,yBAAP,GAC7BZ,YAAY,CAACO,MAAM,CAACK,yBAAR,CADiB,GAE7B,IAFJ;AAGD;;AAEOC,EAAAA,uBAAuB,CAACC,IAAD,EAAe;AAC5C,QAAI,KAAKH,yBAAT,EAAoC;AAClC,aAAO,CAAC,CAAC,KAAKA,yBAAL,CAA+BG,IAA/B,CAAT;AACD;;AACD,WAAO,CAAC,KAAKL,yBAAL,CAA+BK,IAA/B,CAAR;AACD;;AAEDC,EAAAA,4BAA4B,CAACD,IAAD,EAA6C;AACvE,WACE,KAAKD,uBAAL,CAA6BC,IAA7B,KACA,CAAC,CAAC,KAAKN,UAAL,CAAgBM,IAAhB,CAFJ;AAID;;AAEDE,EAAAA,uBAAuB,CACrBF,IADqB,EAEgD;AACrE,WAAQ,KAAKN,UAAL,CAAgBM,IAAhB,CAAD,IAA0D,IAAjE;AACD;;AAnC0C","sourcesContent":["import { CSSProcessorConfig, CSSPropertyNameList } from './config';\nimport makepropertiesValidators, {\n  ValidatorsType\n} from './makepropertiesValidators';\nimport { GenericCSSPropertyValidator } from './validators/GenericPropertyValidator';\n\nfunction makeRegistry(list: CSSPropertyNameList) {\n  const registry = {} as any;\n  list.forEach((prop) => {\n    registry[prop] = true;\n  });\n  return registry;\n}\n\nexport class CSSPropertiesValidationRegistry {\n  public readonly validators: Readonly<ValidatorsType>;\n  public readonly ignoredPropertiesRegistry: Partial<Record<string, true>>;\n  public readonly allowedPropertiesRegistry: Partial<\n    Record<string, true>\n  > | null;\n\n  constructor(config: CSSProcessorConfig) {\n    this.validators = makepropertiesValidators(config);\n    this.ignoredPropertiesRegistry = makeRegistry(\n      config.inlinePropertiesBlacklist\n    );\n    this.allowedPropertiesRegistry = config.inlinePropertiesWhitelist\n      ? makeRegistry(config.inlinePropertiesWhitelist)\n      : null;\n  }\n\n  private isInlinePropertyAllowed(name: string) {\n    if (this.allowedPropertiesRegistry) {\n      return !!this.allowedPropertiesRegistry[name];\n    }\n    return !this.ignoredPropertiesRegistry[name];\n  }\n\n  shouldRegisterInlineProperty(name: string): name is keyof ValidatorsType {\n    return (\n      this.isInlinePropertyAllowed(name) &&\n      !!this.validators[name as keyof ValidatorsType]\n    );\n  }\n\n  getValidatorForProperty<T extends string>(\n    name: T\n  ): T extends keyof ValidatorsType ? GenericCSSPropertyValidator : null {\n    return (this.validators[name as keyof ValidatorsType] as any) || null;\n  }\n}\n"]}