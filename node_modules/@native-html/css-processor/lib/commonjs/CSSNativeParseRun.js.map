{"version":3,"sources":["CSSNativeParseRun.ts"],"names":["nativeDirectionalStyleKeys","borderBottomEndRadius","borderBottomStartRadius","borderEndColor","borderEndWidth","borderStartColor","borderStartWidth","borderTopEndRadius","borderTopStartRadius","end","marginEnd","marginStart","paddingEnd","paddingStart","start","extraLongViewStyles","elevation","overflow","overlayColor","resizeMode","rotation","scaleX","scaleY","shadowColor","shadowOffset","shadowOpacity","shadowRadius","testID","tintColor","transformMatrix","translateX","translateY","extraTextStyles","includeFontPadding","textAlignVertical","textShadowColor","textShadowOffset","textShadowRadius","writingDirection","extraStylesRegistry","CSSNativeParseRun","CSSParseRun","constructor","declaration","registry","fillProp","key","value","validator","validationMap","getValidatorForProperty","normalizedValue","normalizeNativeValue","ShortMergeRequest","forEach","innerKey","innerValue","processedProps","withProperty","compatCategory","displayCategory","propagationCategory","console","warn","fillProcessedProps","Object","keys"],"mappings":"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","sourcesContent":["import { CSSParseRun } from './CSSParseRun';\nimport { MixedStyleDeclaration } from './CSSProcessor';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { lookupRecord } from './helpers';\nimport {\n  ExtraNativeTextStyle,\n  NativeDirectionalStyleKeys,\n  ExtraNativeLongViewStyleKeys\n} from './native-types';\nimport { CSSPropertySpecs } from './processor-types';\nimport { ShortMergeRequest } from './ShortMergeRequest';\n\nconst nativeDirectionalStyleKeys: Record<NativeDirectionalStyleKeys, 'block'> =\n  {\n    borderBottomEndRadius: 'block',\n    borderBottomStartRadius: 'block',\n    borderEndColor: 'block',\n    borderEndWidth: 'block',\n    borderStartColor: 'block',\n    borderStartWidth: 'block',\n    borderTopEndRadius: 'block',\n    borderTopStartRadius: 'block',\n    end: 'block',\n    marginEnd: 'block',\n    marginStart: 'block',\n    paddingEnd: 'block',\n    paddingStart: 'block',\n    start: 'block'\n  };\n\nconst extraLongViewStyles: Record<ExtraNativeLongViewStyleKeys, 'block'> = {\n  elevation: 'block',\n  overflow: 'block',\n  overlayColor: 'block',\n  resizeMode: 'block',\n  rotation: 'block',\n  scaleX: 'block',\n  scaleY: 'block',\n  shadowColor: 'block',\n  shadowOffset: 'block',\n  shadowOpacity: 'block',\n  shadowRadius: 'block',\n  testID: 'block',\n  tintColor: 'block',\n  transformMatrix: 'block',\n  translateX: 'block',\n  translateY: 'block'\n};\n\nconst extraTextStyles: Record<keyof ExtraNativeTextStyle, 'text'> = {\n  includeFontPadding: 'text',\n  textAlignVertical: 'text',\n  textShadowColor: 'text',\n  textShadowOffset: 'text',\n  textShadowRadius: 'text',\n  writingDirection: 'text'\n};\n\nconst extraStylesRegistry = {\n  ...extraTextStyles,\n  ...extraLongViewStyles\n};\n\nexport class CSSNativeParseRun extends CSSParseRun {\n  private declaration: MixedStyleDeclaration;\n\n  constructor(\n    declaration: MixedStyleDeclaration,\n    registry: CSSPropertiesValidationRegistry\n  ) {\n    super(registry);\n    this.declaration = declaration;\n  }\n\n  private fillProp<K extends keyof MixedStyleDeclaration>(\n    key: K,\n    value: any\n  ): void {\n    const validator = this.validationMap.getValidatorForProperty(key);\n    if (validator) {\n      const normalizedValue = validator.normalizeNativeValue(value);\n      if (normalizedValue instanceof ShortMergeRequest) {\n        normalizedValue.forEach(([innerKey, innerValue]) => {\n          this.fillProp(innerKey as any, innerValue);\n        });\n      } else {\n        // assume longhand merge\n        this.processedProps.withProperty(\n          key,\n          normalizedValue,\n          validator as CSSPropertySpecs\n        );\n      }\n    } else if (lookupRecord(extraStylesRegistry, key)) {\n      this.processedProps.withProperty(key, value, {\n        compatCategory: 'native',\n        displayCategory: extraStylesRegistry[key],\n        propagationCategory: 'retain'\n      });\n    } else if (lookupRecord(nativeDirectionalStyleKeys, key)) {\n      console.warn(\n        `Native style property \"${key}\" is a directional style property. These are not yet supported.`\n      );\n    } else {\n      console.warn(\n        `Native style property \"${key}\" is not supported and has been ignored.`\n      );\n    }\n  }\n\n  protected fillProcessedProps(): void {\n    const declaration = this.declaration;\n    for (const key of Object.keys(declaration) as Array<\n      keyof MixedStyleDeclaration\n    >) {\n      this.fillProp(key, this.declaration[key]);\n    }\n  }\n}\n"]}