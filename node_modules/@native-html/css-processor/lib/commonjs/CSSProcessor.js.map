{"version":3,"sources":["CSSProcessor.ts"],"names":["CSSProcessor","constructor","userConfig","config","defaultCSSProcessorConfig","registry","CSSPropertiesValidationRegistry","compileStyleDeclaration","declaration","parseRun","CSSNativeParseRun","exec","compileInlineCSS","inlineCSS","CSSInlineParseRun"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;;;AAkGO,MAAMA,YAAN,CAAmB;AAExBC,EAAAA,WAAW,CAACC,UAAD,EAA2C;AAAA;;AACpD,UAAMC,MAAM,GAAG,EACb,GAAGC,kCADU;AAEb,SAAGF;AAFU,KAAf;AAIA,SAAKG,QAAL,GAAgB,IAAIC,gEAAJ,CAAoCH,MAApC,CAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,uBAAuB,CACrBC,WADqB,EAEF;AACnB,UAAMC,QAAQ,GAAG,IAAIC,oCAAJ,CAAsBF,WAAtB,EAAmC,KAAKH,QAAxC,CAAjB;AACA,WAAOI,QAAQ,CAACE,IAAT,EAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,SAAD,EAAuC;AACrD,UAAMJ,QAAQ,GAAG,IAAIK,oCAAJ,CAAsBD,SAAtB,EAAiC,KAAKR,QAAtC,CAAjB;AACA,WAAOI,QAAQ,CAACE,IAAT,EAAP;AACD;;AA5BuB","sourcesContent":["import { CSSProcessorConfig } from './config';\nimport { CSSInlineParseRun } from './CSSInlineParseRun';\nimport { CSSNativeParseRun } from './CSSNativeParseRun';\nimport { CSSProcessedProps } from './CSSProcessedProps';\nimport { CSSPropertiesValidationRegistry } from './CSSPropertiesValidationRegistry';\nimport { defaultCSSProcessorConfig } from './default';\nimport {\n  ExtraNativeShortStyle,\n  ExtraNativeTextStyle,\n  ExtraNativeUntranslatedLongStyles,\n  ExtraNativeViewStyle\n} from './native-types';\nimport {\n  WebBlockRetainProperties,\n  WebTextFlowProperties\n} from './processor-types';\n\n// https://www.w3.org/TR/CSS22/\n// https://www.w3.org/TR/css3-cascade/\n// https://www.w3.org/TR/css-cascade-4/\n// https://www.w3.org/TR/css-text-3/\n// https://www.w3.org/TR/css3-values/\n// https://www.w3.org/TR/css-values-4/\n\n/**\n * All those styles that result from processing inline styles.\n */\nexport type CSSFlattenProcessedTypes =\n  CSSProcessedProps['native']['text']['flow'] &\n    CSSProcessedProps['native']['block']['flow'] &\n    CSSProcessedProps['native']['text']['retain'] &\n    CSSProcessedProps['native']['block']['retain'];\n\n/**\n * These properties can be set to any of the supoprted CSS sizes, including em,\n * rem units and special values such as large, larger for `fontSize`, thin,\n * medium for `borderWidth`, before passed to {@link CSSProcessor.compileStyleDeclaration}.\n */\nexport type MixedSizeCSSPropertiesKeys =\n  | 'fontSize'\n  | 'borderWidth'\n  | 'letterSpacing'\n  | 'bottom'\n  | 'left'\n  | 'top'\n  | 'right'\n  | 'width'\n  | 'height'\n  | 'flexBasis'\n  | 'borderRadius'\n  | 'borderBottomLeftRadius'\n  | 'borderBottomRightRadius'\n  | 'borderTopLeftRadius'\n  | 'borderTopRightRadius'\n  | 'borderWidth'\n  | 'borderBottomWidth'\n  | 'borderLeftWidth'\n  | 'borderRightWidth'\n  | 'marginBottom'\n  | 'marginLeft'\n  | 'marginRight'\n  | 'marginTop'\n  | 'margin'\n  | 'marginHorizontal'\n  | 'marginVertical'\n  | 'maxWidth'\n  | 'maxHeight'\n  | 'minWidth'\n  | 'minHeight'\n  | 'padding'\n  | 'paddingBottom'\n  | 'paddingLeft'\n  | 'paddingRight'\n  | 'paddingTop'\n  | 'paddingHorizontal'\n  | 'paddingVertical';\n\n/**\n * A Style object that can contain mixins of a subset of ViewStyle, TextStyle,\n * and special style entries such as \"whiteSpace\", \"listStyleType\".\n *\n * @remarks Also note that special lengths,\n * such as \"em\", \"rem\" units, and special values, such as \"%\" for fontSize, and\n * keyword values ('larger', 'smaller' for fontSize, 'thick', 'thin', 'medium'\n * for border*Width) will be handled as per CSS specifications on units.\n * Another special use case is fontFamily, which can be a list of font names as\n * per the CSS standard. The translated font will be selected with\n * {@link CSSProcessorConfig.isFontSupported}.\n */\nexport type MixedStyleDeclaration = Omit<\n  CSSFlattenProcessedTypes,\n  MixedSizeCSSPropertiesKeys\n> &\n  WebTextFlowProperties &\n  WebBlockRetainProperties &\n  ExtraNativeTextStyle &\n  ExtraNativeViewStyle &\n  ExtraNativeShortStyle &\n  ExtraNativeUntranslatedLongStyles &\n  {\n    [k in MixedSizeCSSPropertiesKeys]?: number | string;\n  };\n\nexport class CSSProcessor {\n  public readonly registry: CSSPropertiesValidationRegistry;\n  constructor(userConfig?: Partial<CSSProcessorConfig>) {\n    const config = {\n      ...defaultCSSProcessorConfig,\n      ...userConfig\n    };\n    this.registry = new CSSPropertiesValidationRegistry(config);\n  }\n\n  /**\n   *\n   * Incoming style declaration:\n   * - For native styles: any RN compatible style declaration + special units\n   *   (font-size: medium) + relative units (smaller, larger, em, rem and perhaps vw)\n   *\n   * @param declaration\n   */\n  compileStyleDeclaration(\n    declaration: MixedStyleDeclaration\n  ): CSSProcessedProps {\n    const parseRun = new CSSNativeParseRun(declaration, this.registry);\n    return parseRun.exec();\n  }\n\n  compileInlineCSS(inlineCSS: string): CSSProcessedProps {\n    const parseRun = new CSSInlineParseRun(inlineCSS, this.registry);\n    return parseRun.exec();\n  }\n}\n"]}