{"version":3,"sources":["hoist.ts"],"names":["groupText","tnode","newChildren","wrapperInit","elementModel","context","init","parentStyles","styles","parent","wrapper","TPhrasingCtor","wrapperChildren","child","children","TTextCtor","push","length","bindChildren","hoistNode","map","cnode","TBlockCtor","newNode","cloneInitParams","output","hoist","tree"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,KAAnB,EAAiD;AAC/C,MAAIC,WAAwB,GAAG,EAA/B;AACA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,YAAY,EAAE,IADI;AAElBC,IAAAA,OAAO,EAAEJ,KAAK,CAACK,IAAN,CAAWD,OAFF;AAGlB;AACA;AACA;AACAE,IAAAA,YAAY,EAAEN,KAAK,CAACO,MANF;AAOlBC,IAAAA,MAAM,EAAE;AAPU,GAApB;AASA,MAAIC,OAAO,GAAG,IAAIC,4BAAJ,CAAkBR,WAAlB,CAAd;AACA,MAAIS,eAA4B,GAAG,EAAnC;;AACA,OAAK,MAAMC,KAAX,IAAoBZ,KAAK,CAACa,QAA1B,EAAoC;AAClC,QAAID,KAAK,YAAYE,oBAAjB,IAA8BF,KAAK,YAAYF,4BAAnD,EAAkE;AAChEC,MAAAA,eAAe,CAACI,IAAhB,CAAqBH,KAArB;AACD,KAFD,MAEO;AACL,UAAID,eAAe,CAACK,MAApB,EAA4B;AAC1Bf,QAAAA,WAAW,CAACc,IAAZ,CAAiBN,OAAjB;AACAA,QAAAA,OAAO,CAACQ,YAAR,CAAqBN,eAArB;AACAF,QAAAA,OAAO,GAAG,IAAIC,4BAAJ,CAAkBR,WAAlB,CAAV;AACAS,QAAAA,eAAe,GAAG,EAAlB;AACD;;AACDV,MAAAA,WAAW,CAACc,IAAZ,CAAiBH,KAAjB;AACD;AACF;;AACD,MAAID,eAAe,CAACK,MAApB,EAA4B;AAC1BP,IAAAA,OAAO,CAACQ,YAAR,CAAqBN,eAArB;AACAV,IAAAA,WAAW,CAACc,IAAZ,CAAiBN,OAAjB;AACD;;AACDT,EAAAA,KAAK,CAACiB,YAAN,CAAmBhB,WAAnB;AACA,SAAOD,KAAP;AACD;;AAED,SAASkB,SAAT,CAAmBlB,KAAnB,EAAgD;AAC9C,MAAIA,KAAK,YAAYc,oBAArB,EAAgC;AAC9B,WAAOd,KAAP;AACD;;AACDA,EAAAA,KAAK,CAACiB,YAAN,CAAmBjB,KAAK,CAACa,QAAN,CAAeM,GAAf,CAAmBD,SAAnB,CAAnB;;AACA,MAAIlB,KAAK,YAAYU,4BAArB,EAAoC;AAClC,SAAK,MAAMU,KAAX,IAAoBpB,KAAK,CAACa,QAA1B,EAAoC;AAClC,UAAIO,KAAK,YAAYC,mBAArB,EAAiC;AAC/B,cAAMC,OAAO,GAAG,IAAID,mBAAJ,CAAerB,KAAK,CAACuB,eAAN,EAAf,CAAhB;AACAD,QAAAA,OAAO,CAACL,YAAR,CAAqBjB,KAAK,CAACa,QAA3B;AACA,cAAMW,MAAM,GAAGzB,SAAS,CAACuB,OAAD,CAAxB;AACA,eAAOE,MAAP;AACD;AACF;AACF,GATD,MASO,IAAIxB,KAAK,YAAYqB,mBAArB,EAAiC;AACtC,QAAIrB,KAAK,CAACa,QAAN,CAAeG,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,YAAMQ,MAAM,GAAGzB,SAAS,CAACC,KAAD,CAAxB;AACA,aAAOwB,MAAP;AACD;AACF;;AACD,SAAOxB,KAAP;AACD;;AAEM,SAASyB,KAAT,CAAeC,IAAf,EAA2C;AAChD,SAAOR,SAAS,CAACQ,IAAD,CAAhB;AACD","sourcesContent":["import TBlockCtor, { TBlockImpl } from '../tree/TBlockCtor';\nimport { TNodeImpl } from '../tree/tree-types';\nimport { TPhrasingCtor } from '../tree/TPhrasingCtor';\nimport { TTextCtor } from '../tree/TTextCtor';\n\n/**\n * Wrap text nodes around TPhrasing nodes.\n * @param tnode The parent node of all elements to group.\n */\nfunction groupText(tnode: TBlockImpl): TNodeImpl {\n  let newChildren: TNodeImpl[] = [];\n  const wrapperInit = {\n    elementModel: null,\n    context: tnode.init.context,\n    // We need to merge styles here to make sure\n    // some React Native styles working only for the uppermost Text element\n    // such as \"textAlign\" are preserved.\n    parentStyles: tnode.styles,\n    parent: null\n  };\n  let wrapper = new TPhrasingCtor(wrapperInit);\n  let wrapperChildren: TNodeImpl[] = [];\n  for (const child of tnode.children) {\n    if (child instanceof TTextCtor || child instanceof TPhrasingCtor) {\n      wrapperChildren.push(child);\n    } else {\n      if (wrapperChildren.length) {\n        newChildren.push(wrapper);\n        wrapper.bindChildren(wrapperChildren);\n        wrapper = new TPhrasingCtor(wrapperInit);\n        wrapperChildren = [];\n      }\n      newChildren.push(child);\n    }\n  }\n  if (wrapperChildren.length) {\n    wrapper.bindChildren(wrapperChildren);\n    newChildren.push(wrapper);\n  }\n  tnode.bindChildren(newChildren);\n  return tnode;\n}\n\nfunction hoistNode(tnode: TNodeImpl): TNodeImpl {\n  if (tnode instanceof TTextCtor) {\n    return tnode;\n  }\n  tnode.bindChildren(tnode.children.map(hoistNode));\n  if (tnode instanceof TPhrasingCtor) {\n    for (const cnode of tnode.children) {\n      if (cnode instanceof TBlockCtor) {\n        const newNode = new TBlockCtor(tnode.cloneInitParams());\n        newNode.bindChildren(tnode.children);\n        const output = groupText(newNode);\n        return output;\n      }\n    }\n  } else if (tnode instanceof TBlockCtor) {\n    if (tnode.children.length > 0) {\n      const output = groupText(tnode);\n      return output;\n    }\n  }\n  return tnode;\n}\n\nexport function hoist(tree: TNodeImpl): TNodeImpl {\n  return hoistNode(tree);\n}\n"]}