{"version":3,"sources":["TStyles.ts"],"names":["notNil","not","nil","inheritProperties","properties","realProperties","filter","length","Object","keys","reduce","prev","curr","prototype","TStyles","constructor","ownProcessedProps","parentStyles","nativeTextFlow","native","text","flow","nativeBlockFlow","block","webTextFlow","web","nativeTextRet","retain","nativeBlockRet","webBlockRet","empty","CSSProcessedProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,MAAM,GAAG,sBAAQC,YAAR,EAAaC,cAAb,CAAf;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CACE,GAAGC,UADL,EAEiB;AACf,QAAMC,cAAc,GAAGD,UAAU,CAACE,MAAX,CAAkBN,MAAlB,CAAvB;;AACA,MAAIK,cAAc,CAACE,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,WAAOF,cAAc,CAAC,CAAD,CAArB;AACD;;AACD,MAAIG,MAAM,CAACC,IAAP,CAAYJ,cAAc,CAAC,CAAD,CAA1B,EAA+BE,MAA/B,KAA0C,CAA9C,EAAiD;AAC/C,WAAOF,cAAc,CAAC,CAAD,CAArB;AACD;;AACD,SAAOA,cAAc,CAACK,MAAf,CACL,CAACC,IAAD,EAAOC,IAAP,MAAiB,EAAE,GAAGD,IAAL;AAAW,OAAGC;AAAd,GAAjB,CADK,EAELJ,MAAM,CAACK,SAFF,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAUO,MAAMC,OAAN,CAAsC;AAQ3CC,EAAAA,WAAW,CACTC,iBADS,EAETC,YAFS,EAGT;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACA,SAAKC,cAAL,GAAsBf,iBAAiB,CACrCc,YADqC,aACrCA,YADqC,uBACrCA,YAAY,CAAEC,cADuB,EAErCF,iBAAiB,CAACG,MAAlB,CAAyBC,IAAzB,CAA8BC,IAFO,CAAvC;AAIA,SAAKC,eAAL,GAAuBnB,iBAAiB,CACtCc,YADsC,aACtCA,YADsC,uBACtCA,YAAY,CAAEK,eADwB,EAEtCN,iBAAiB,CAACG,MAAlB,CAAyBI,KAAzB,CAA+BF,IAFO,CAAxC;AAIA,SAAKG,WAAL,GAAmBrB,iBAAiB,CAClCc,YADkC,aAClCA,YADkC,uBAClCA,YAAY,CAAEO,WADoB,EAElCR,iBAAiB,CAACS,GAAlB,CAAsBL,IAAtB,CAA2BC,IAFO,CAApC,CATA,CAaA;AACA;AACA;AACA;AACA;;AACA,SAAKK,aAAL,GAAqBvB,iBAAiB,CACpCc,YADoC,aACpCA,YADoC,uBACpCA,YAAY,CAAES,aADsB,EAEpCV,iBAAiB,CAACG,MAAlB,CAAyBC,IAAzB,CAA8BO,MAFM,CAAtC;AAIA,SAAKC,cAAL,GAAsBZ,iBAAiB,CAACG,MAAlB,CAAyBI,KAAzB,CAA+BI,MAArD;AACA,SAAKE,WAAL,GAAmBb,iBAAiB,CAACS,GAAlB,CAAsBF,KAAtB,CAA4BI,MAA/C;AACD;;AAEW,SAALG,KAAK,GAAY;AACtB,WAAO,IAAIhB,OAAJ,CAAY,IAAIiB,+BAAJ,EAAZ,CAAP;AACD;;AAvC0C","sourcesContent":["import { CSSProperties, CSSProcessedProps } from '@native-html/css-processor';\nimport nil from 'ramda/src/isNil';\nimport not from 'ramda/src/not';\nimport compose from 'ramda/src/compose';\n\nconst notNil = compose(not, nil);\n/**\n * A merge properties from left to right.\n *\n * @param child\n * @param parent\n */\nfunction inheritProperties(\n  ...properties: Array<CSSProperties | null | undefined>\n): CSSProperties {\n  const realProperties = properties.filter(notNil) as CSSProperties[];\n  if (realProperties.length === 1) {\n    return realProperties[0];\n  }\n  if (Object.keys(realProperties[0]).length === 0) {\n    return realProperties[1];\n  }\n  return realProperties.reduce(\n    (prev, curr) => ({ ...prev, ...curr }),\n    Object.prototype as CSSProperties\n  ) as CSSProperties;\n}\n\n/**\n * A record of styles organized in logical chunks:\n *\n * - wether they are supported in React Native (native) and others (web).\n * - wether they target native Views (block) or Text (text).\n * - wether they are inherited by this node's children (flow) or not (retain).\n *\n * @public\n */\nexport interface TStylesShape {\n  readonly nativeTextFlow: CSSProcessedProps['native']['text']['flow'];\n  readonly nativeBlockFlow: CSSProcessedProps['native']['block']['flow'];\n  readonly nativeTextRet: CSSProcessedProps['native']['text']['retain'];\n  readonly nativeBlockRet: CSSProcessedProps['native']['block']['retain'];\n  readonly webTextFlow: CSSProcessedProps['web']['text']['flow'];\n  readonly webBlockRet: CSSProcessedProps['web']['block']['retain'];\n}\n\nexport class TStyles implements TStylesShape {\n  public readonly nativeTextFlow: CSSProcessedProps['native']['text']['flow'];\n  public readonly nativeBlockFlow: CSSProcessedProps['native']['block']['flow'];\n  public readonly nativeTextRet: CSSProcessedProps['native']['text']['retain'];\n  public readonly nativeBlockRet: CSSProcessedProps['native']['block']['retain'];\n  public readonly webTextFlow: CSSProcessedProps['web']['text']['flow'];\n  public readonly webBlockRet: CSSProcessedProps['web']['block']['retain'];\n\n  constructor(\n    ownProcessedProps: CSSProcessedProps,\n    parentStyles?: TStyles | null\n  ) {\n    this.nativeTextFlow = inheritProperties(\n      parentStyles?.nativeTextFlow,\n      ownProcessedProps.native.text.flow\n    );\n    this.nativeBlockFlow = inheritProperties(\n      parentStyles?.nativeBlockFlow,\n      ownProcessedProps.native.block.flow\n    );\n    this.webTextFlow = inheritProperties(\n      parentStyles?.webTextFlow,\n      ownProcessedProps.web.text.flow\n    );\n    // In theory, we shouldn't merge those properties. However, these\n    // properties being textDecoration*, we actually want children nodes to\n    // inherit from them. A cleaner solution would be to to let each TNode\n    // handle its merging logic, because only TPhrasing and TText nodes would\n    // need to merge these.\n    this.nativeTextRet = inheritProperties(\n      parentStyles?.nativeTextRet,\n      ownProcessedProps.native.text.retain\n    );\n    this.nativeBlockRet = ownProcessedProps.native.block.retain;\n    this.webBlockRet = ownProcessedProps.web.block.retain;\n  }\n\n  static empty(): TStyles {\n    return new TStyles(new CSSProcessedProps());\n  }\n}\n"]}