{"version":3,"sources":["TBlockCtor.ts"],"names":["TBlockCtor","TBlock","init","initialize","prototype","TNodeCtor","matchContentModel","contentModel","HTMLContentModel","block","mixed","collapseChildren","indexesToSplice","children","forEach","child","i","collapse","isEmpty","push","spliceChildren","getNativeStyles","__nativeStyles","styles","nativeBlockFlow","nativeBlockRet"],"mappings":";;;;;;;AAAA;;AACA;;;;AAKA,MAAMA,UAAU,GAAG,SAASC,MAAT,CAA2CC,IAA3C,EAA4D;AAC7E,OAAKC,UAAL,CAAgBD,IAAhB;AACD,CAFD,C,CAIA;;;;AACAF,UAAU,CAACI,SAAX,GAAuB,IAAIC,kBAAJ,CAAc,OAAd,EAAuB,QAAvB,CAAvB;;AAEAL,UAAU,CAACI,SAAX,CAAqBE,iBAArB,GAAyC,SAASA,iBAAT,CACvCC,YADuC,EAEvC;AACA,SACEA,YAAY,KAAKC,0BAAiBC,KAAlC,IACAF,YAAY,KAAKC,0BAAiBE,KAFpC;AAID,CAPD;;AASAV,UAAU,CAACI,SAAX,CAAqBO,gBAArB,GAAwC,SAASA,gBAAT,GAA4B;AAClE,MAAIC,eAAyB,GAAG,EAAhC;AACA,OAAKC,QAAL,CAAcC,OAAd,CAAsB,CAACC,KAAD,EAAQC,CAAR,KAAc;AAClCD,IAAAA,KAAK,CAACE,QAAN;;AACA,QAAIF,KAAK,CAACG,OAAN,EAAJ,EAAqB;AACnBN,MAAAA,eAAe,CAACO,IAAhB,CAAqBH,CAArB;AACD;AACF,GALD;AAMA,OAAKI,cAAL,CAAoBR,eAApB;AACD,CATD;;AAWAZ,UAAU,CAACI,SAAX,CAAqBiB,eAArB,GAAuC,SAASA,eAAT,GAErC;AACA,MAAI,KAAKC,cAAL,KAAwB,KAA5B,EAAmC;AACjC,SAAKA,cAAL,GAAsB,EACpB,GAAG,KAAKC,MAAL,CAAYC,eADK;AAEpB,SAAG,KAAKD,MAAL,CAAYE;AAFK,KAAtB;AAID;;AACD,SAAO,KAAKH,cAAZ;AACD,CAVD;;eAYetB,U","sourcesContent":["import HTMLContentModel from '../model/HTMLContentModel';\nimport TNodeCtor, { GenericTNodeCtor, Mutable } from './TNodeCtor';\nimport { TNodeImpl, TNodeInit } from './tree-types';\n\nexport interface TBlockImpl extends TNodeImpl {}\n\nconst TBlockCtor = function TBlock(this: Mutable<TBlockImpl>, init: TNodeInit) {\n  this.initialize(init);\n} as Function as GenericTNodeCtor<TNodeInit, TBlockImpl>;\n\n//@ts-ignore\nTBlockCtor.prototype = new TNodeCtor('block', 'TBlock');\n\nTBlockCtor.prototype.matchContentModel = function matchContentModel(\n  contentModel\n) {\n  return (\n    contentModel === HTMLContentModel.block ||\n    contentModel === HTMLContentModel.mixed\n  );\n};\n\nTBlockCtor.prototype.collapseChildren = function collapseChildren() {\n  let indexesToSplice: number[] = [];\n  this.children.forEach((child, i) => {\n    child.collapse();\n    if (child.isEmpty()) {\n      indexesToSplice.push(i);\n    }\n  });\n  this.spliceChildren(indexesToSplice);\n};\n\nTBlockCtor.prototype.getNativeStyles = function getNativeStyles(\n  this: TNodeImpl\n) {\n  if (this.__nativeStyles === false) {\n    this.__nativeStyles = {\n      ...this.styles.nativeBlockFlow,\n      ...this.styles.nativeBlockRet\n    };\n  }\n  return this.__nativeStyles;\n};\n\nexport default TBlockCtor;\n\nexport { TBlockCtor };\n"]}