{"version":3,"sources":["TEmptyCtor.ts"],"names":["TEmptyCtor","TEmpty","init","initialize","prototype","TNodeCtor","matchContentModel","contentModel","HTMLContentModel","none"],"mappings":";;;;;;;AAAA;;AAGA;;;;AAUA,MAAMA,UAAU,GAAG,SAASC,MAAT,CAEjBC,IAFiB,EAGjB;AACA,OAAKC,UAAL,CAAgBD,IAAhB;AACD,CALD,C,CAOA;;;;AACAF,UAAU,CAACI,SAAX,GAAuB,IAAIC,kBAAJ,CAAc,OAAd,EAAuB,QAAvB,CAAvB;;AAEAL,UAAU,CAACI,SAAX,CAAqBE,iBAArB,GAAyC,SAASA,iBAAT,CACvCC,YADuC,EAEvC;AACA,SAAOA,YAAY,KAAKC,0BAAiBC,IAAzC;AACD,CAJD;;eAMeT,U","sourcesContent":["import HTMLContentModel from '../model/HTMLContentModel';\nimport { Element } from '../dom/dom-utils';\nimport { TNodeImpl, TNodeInit } from './tree-types';\nimport TNodeCtor, { GenericTNodeCtor, Mutable } from './TNodeCtor';\n\nexport interface TEmptyImpl extends TNodeImpl<TEmptyInit> {\n  readonly domNode: Element;\n}\n\nexport interface TEmptyInit extends TNodeInit {\n  domNode: Element;\n}\n\nconst TEmptyCtor = function TEmpty(\n  this: Mutable<TEmptyImpl>,\n  init: TEmptyInit\n) {\n  this.initialize(init);\n} as Function as GenericTNodeCtor<TEmptyInit, TEmptyImpl>;\n\n//@ts-ignore\nTEmptyCtor.prototype = new TNodeCtor('empty', 'TEmpty');\n\nTEmptyCtor.prototype.matchContentModel = function matchContentModel(\n  contentModel: HTMLContentModel\n) {\n  return contentModel === HTMLContentModel.none;\n};\n\nexport default TEmptyCtor;\n\nexport { TEmptyCtor };\n"]}