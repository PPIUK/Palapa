{"version":3,"sources":["TDocumentImpl.ts"],"names":["defaultContextBase","Object","freeze","baseHref","baseTarget","charset","title","lang","dir","links","meta","getDefaultDocumentContext","assign","extractContextFromHead","head","context","domNode","children","filter","isDomElement","forEach","child","tagName","attribs","name","push","toLowerCase","titleChild","isDomText","data","trim","href","target","htmlModel","HTMLElementModel","fromNativeModel","category","TDocumentCtor","TDocument","init","initialize","prototype","create","TBlockImpl","defineProperty","value","writable","parseChildren","attributes"],"mappings":"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","sourcesContent":["import { GenericTNodeCtor, Mutable } from './TNodeCtor';\nimport HTMLElementModel from '../model/HTMLElementModel';\nimport { isDomElement, isDomText } from '../dom/dom-utils';\nimport { TEmptyImpl } from './TEmptyCtor';\nimport { TNodeInit, TNodeImpl, DocumentContext } from './tree-types';\nimport TBlockImpl from './TBlockCtor';\n\nexport type TDocumentInit = Omit<TNodeInit, 'elementModel'>;\n\nexport interface TDocumentImpl extends TNodeImpl<TNodeInit> {\n  readonly context: Readonly<DocumentContext>;\n  /**\n   * Iterate over children and extract meta-information into context field.\n   * Replace children with a single-element array containing the body.\n   */\n  parseChildren(): void;\n}\n\nconst defaultContextBase: DocumentContext = Object.freeze({\n  baseHref: 'about:blank',\n  baseTarget: '_self',\n  charset: 'utf-8',\n  title: '',\n  lang: 'en',\n  dir: 'ltr',\n  links: [],\n  meta: []\n});\n\nfunction getDefaultDocumentContext(): DocumentContext {\n  return Object.assign({}, defaultContextBase, { links: [], meta: [] });\n}\n\nfunction extractContextFromHead(head: TEmptyImpl, lang?: string, dir?: string) {\n  const context = getDefaultDocumentContext();\n  if (lang) {\n    context.lang = lang;\n  }\n  if (dir) {\n    context.dir = 'rtl';\n  }\n  const domNode = head.domNode;\n  const children = domNode.children;\n  children.filter(isDomElement).forEach((child) => {\n    if (child.tagName === 'meta') {\n      if (child.attribs.name) {\n        context.meta.push(child.attribs as any);\n      } else if (child.attribs.charset) {\n        context.charset = child.attribs.charset.toLowerCase();\n      }\n    } else if (child.tagName === 'link') {\n      context.links.push(child.attribs);\n    } else if (child.tagName === 'title') {\n      for (const titleChild of child.children.filter(isDomText)) {\n        context.title = titleChild.data.trim();\n        break;\n      }\n    } else if (child.tagName === 'base') {\n      context.baseHref = child.attribs.href || context.baseHref;\n      context.baseTarget = (child.attribs.target as any) || context.baseTarget;\n    }\n  });\n  return context;\n}\n\nconst htmlModel = HTMLElementModel.fromNativeModel({\n  tagName: 'html' as any,\n  category: 'grouping'\n});\n\nconst TDocumentCtor = function TDocument(\n  this: Mutable<TDocumentImpl>,\n  init: TDocumentInit\n) {\n  this.initialize(init as TNodeInit);\n} as Function as GenericTNodeCtor<TDocumentInit, TDocumentImpl>;\n\nTDocumentCtor.prototype = Object.create(TBlockImpl.prototype);\n\nObject.defineProperty(TDocumentCtor.prototype, 'tagName', {\n  value: 'html',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'type', {\n  value: 'document',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'displayName', {\n  value: 'TDocument',\n  writable: false\n});\n\nObject.defineProperty(TDocumentCtor.prototype, 'elementModel', {\n  value: htmlModel,\n  writable: false\n});\n\nTDocumentCtor.prototype.parseChildren = function parseChildren(\n  this: Mutable<TDocumentImpl>\n) {\n  let head: TEmptyImpl | undefined;\n  for (const child of this.children) {\n    if (child.tagName === 'head') {\n      head = child as unknown as TEmptyImpl;\n      break;\n    }\n  }\n  this.context = Object.freeze(\n    head\n      ? extractContextFromHead(\n          head,\n          this.attributes!.lang,\n          this.attributes!.dir\n        )\n      : {\n          ...getDefaultDocumentContext(),\n          lang: this.attributes!.lang,\n          dir: this.attributes!.dir as any\n        }\n  );\n};\n\nexport { TDocumentCtor };\n\nexport default TDocumentCtor;\n"]}