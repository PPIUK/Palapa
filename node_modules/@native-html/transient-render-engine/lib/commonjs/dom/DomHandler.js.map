{"version":3,"sources":["DomHandler.ts"],"names":["DomHandler","OriginalDomHandler","constructor","options","undefined","ignoredTags","tag","visitors","isIgnored","bind","ignoreNode","node","tagStack","length","name","ignoredTagsCount","addNode","onText","ontext","text","onopentag","attribs","onclosetag","onElement","onend","onDocument","root"],"mappings":";;;;;;;AAAA;;AASA;;;;AAsCe,MAAMA,UAAN,SAAyBC,sBAAzB,CAA4C;AAKzDC,EAAAA,WAAW,CAACC,OAAD,EAA6B;AACtC,UAAMC,SAAN,EAAiBD,OAAjB,EAA0BC,SAA1B;;AADsC;;AAAA,8CAHb,CAAC,CAGY;;AAAA;;AAEtC,QAAIC,WAAsC,GAAG,EAA7C;;AACA,SAAK,MAAMC,GAAX,IAAkBH,OAAO,CAACE,WAAR,IAAuB,EAAzC,EAA6C;AAC3CA,MAAAA,WAAW,CAACC,GAAD,CAAX,GAAmB,IAAnB;AACD;;AACD,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKE,QAAL,GAAgBJ,OAAO,CAACI,QAAR,IAAoB,EAApC;AACA,UAAMC,SAAS,GAAG,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAlB;;AACA,QAAIN,OAAO,CAACO,UAAZ,EAAwB;AACtB,WAAKF,SAAL,GAAkBG,IAAD,IAAU;AACzB,eACEH,SAAS,CAACG,IAAD,CAAT,IACAR,OAAO,CAACO,UAAR,CAAoBC,IAApB,EAA0B,KAAKC,QAAL,CAAc,KAAKA,QAAL,CAAcC,MAAd,GAAuB,CAArC,CAA1B,CAFF;AAID,OALD;AAMD;AACF;;AAEDL,EAAAA,SAAS,CAACG,IAAD,EAAuC;AAC9C,WACG,KAAKN,WAAL,CAAkBM,IAAD,CAAkBG,IAAnC,CAAD,IACA,KAAKC,gBAAL,GAAwB,CAAC,CAF3B;AAID;;AAEDC,EAAAA,OAAO,CAACL,IAAD,EAAmB;AACxB,QAAI,KAAKH,SAAL,CAAeG,IAAf,MAAyB,IAA7B,EAAmC;AACjC;AACA,UAAI,4BAAaA,IAAb,CAAJ,EAAwB;AACtB,aAAKI,gBAAL;AACD;AACF,KALD,MAKO;AACL,YAAMC,OAAN,CAAcL,IAAd;;AACA,UAAI,yBAAUA,IAAV,CAAJ,EAAqB;AAAA;;AACnB,wDAAKJ,QAAL,EAAcU,MAAd,qGAAuBN,IAAvB;AACD;AACF;AACF;;AAEDO,EAAAA,MAAM,CAACC,IAAD,EAAe;AACnB;AACA;AACA,QAAI,KAAKJ,gBAAL,GAAwB,CAA5B,EAA+B;AAC7B,YAAMG,MAAN,CAAaC,IAAb;AACD;AACF;;AAEDC,EAAAA,SAAS,CAACN,IAAD,EAAeO,OAAf,EAAmC;AAC1C,UAAMD,SAAN,CAAgBN,IAAhB,EAAsBO,OAAtB;AACD;;AAEDC,EAAAA,UAAU,GAAG;AAAA;;AACX;AACA,qDAAKf,QAAL,EAAcgB,SAAd,sGACE,KAAKX,QAAL,CAAc,KAAKA,QAAL,CAAcC,MAAd,GAAuB,CAArC,CADF;AAGA,UAAMS,UAAN;;AACA,QAAI,KAAKP,gBAAL,GAAwB,CAAC,CAA7B,EAAgC;AAC9B,WAAKA,gBAAL;AACD;AACF;;AAEDS,EAAAA,KAAK,GAAS;AAAA;;AACZ,qDAAKjB,QAAL,EAAckB,UAAd,sGAA2B,KAAKC,IAAhC;AACD;;AAtEwD","sourcesContent":["import {\n  DomHandler as OriginalDomHandler,\n  DomHandlerOptions as OriginalDomHandlerOptions,\n  Document,\n  Element,\n  Node,\n  Text,\n  NodeWithChildren\n} from 'domhandler';\nimport { isDomElement, isDomText } from './dom-utils';\n\n/**\n * A record of callback to visit the DOM.\n *\n * @public\n */\nexport interface DomVisitorCallbacks {\n  /**\n   * A callback invoked when encountering a {@link Document}.\n   *\n   * @param document - The document to visit.\n   *\n   */\n  onDocument?(document: Document): void;\n  /**\n   * A callback invoked when encountering an {@link Element}.\n   *\n   * @param element - The element to visit.\n   */\n  onElement?(element: Element): void;\n  /**\n   * A callback invoked when encountering a {@link Text} node.\n   *\n   * @param text - The text to visit.\n   */\n  onText?(text: Text): void;\n}\n\nexport interface DomHandlerOptions extends OriginalDomHandlerOptions {\n  ignoredTags?: string[];\n  visitors?: DomVisitorCallbacks;\n  ignoreNode?: (\n    node: Node,\n    parent: NodeWithChildren\n  ) => boolean | void | unknown;\n}\n\nexport default class DomHandler extends OriginalDomHandler {\n  private ignoredTags: Record<string, boolean>;\n  private ignoredTagsCount = -1;\n  private visitors: DomVisitorCallbacks;\n\n  constructor(options: DomHandlerOptions) {\n    super(undefined, options, undefined);\n    let ignoredTags: DomHandler['ignoredTags'] = {};\n    for (const tag of options.ignoredTags || []) {\n      ignoredTags[tag] = true;\n    }\n    this.ignoredTags = ignoredTags;\n    this.visitors = options.visitors || {};\n    const isIgnored = this.isIgnored.bind(this);\n    if (options.ignoreNode) {\n      this.isIgnored = (node) => {\n        return (\n          isIgnored(node) ||\n          options.ignoreNode!(node, this.tagStack[this.tagStack.length - 1])\n        );\n      };\n    }\n  }\n\n  isIgnored(node: Node): boolean | unknown | void {\n    return (\n      (this.ignoredTags[(node as Element).name] as boolean) ||\n      this.ignoredTagsCount > -1\n    );\n  }\n\n  addNode(node: Node): void {\n    if (this.isIgnored(node) === true) {\n      // increment only for elements.\n      if (isDomElement(node)) {\n        this.ignoredTagsCount++;\n      }\n    } else {\n      super.addNode(node);\n      if (isDomText(node)) {\n        this.visitors.onText?.(node);\n      }\n    }\n  }\n\n  ontext(text: string) {\n    // Only include text when out of an\n    // ignoring session.\n    if (this.ignoredTagsCount < 0) {\n      super.ontext(text);\n    }\n  }\n\n  onopentag(name: string, attribs: any): void {\n    super.onopentag(name, attribs);\n  }\n\n  onclosetag() {\n    // Call onElement on close to give access to this node children\n    this.visitors.onElement?.(\n      this.tagStack[this.tagStack.length - 1] as Element\n    );\n    super.onclosetag();\n    if (this.ignoredTagsCount > -1) {\n      this.ignoredTagsCount--;\n    }\n  }\n\n  onend(): void {\n    this.visitors.onDocument?.(this.root);\n  }\n}\n"]}