{"version":3,"sources":["SharedPropsProvider.tsx"],"names":["SharedPropsContext","React","createContext","defaultSharedProps","useSharedProps","useContext","useDefaultContainerProps","sharedProps","viewProps","defaultViewProps","textProps","defaultTextProps","useComputeMaxWidthForTag","tagName","computeEmbeddedMaxWidth","cw","SharedPropsProvider","props","memoizedSharedProps","customListStyleSpecs","defaultListStyleSpecs","Object","values","createElement","Provider","value","children"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;AAEA,MAAMA,kBAAkB,gBAAGC,eAAMC,aAAN,CAAoBC,2BAApB,CAA3B;AAEA;AACA;AACA;AACA;AACA;;;AACO,SAASC,cAAT,GAA0B;AAC/B,SAAOH,eAAMI,UAAN,CAAiBL,kBAAjB,CAAP;AACD;AAED;AACA;AACA;;;AACO,SAASM,wBAAT,GAGL;AACA,QAAMC,WAAW,GAAGH,cAAc,EAAlC;AACA,SAAO;AACLI,IAAAA,SAAS,EAAE,EACT,GAAGL,4BAAmBM,gBADb;AAET,SAAGF,WAAW,CAACE;AAFN,KADN;AAKLC,IAAAA,SAAS,EAAE,EACT,GAAGP,4BAAmBQ,gBADb;AAET,SAAGJ,WAAW,CAACI;AAFN;AALN,GAAP;AAUD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,wBAAT,CAAkCC,OAAlC,EAAmD;AACxD,QAAM;AAAEC,IAAAA;AAAF,MAA8BV,cAAc,EAAlD;AACA,SAAO,wBACJW,EAAD,IAAgB;AACd,WAAOD,uBAAuB,CAACC,EAAD,EAAKF,OAAL,CAA9B;AACD,GAHI,EAIL,CAACC,uBAAD,EAA0BD,OAA1B,CAJK,CAAP;AAMD;AAED;AACA;AACA;;;AACe,SAASG,mBAAT,CACbC,KADa,EAEb;AACA,QAAMC,mBAAmB,GAAG,oBAC1B,OAAO,EACL,GAAG,gCAAkBD,KAAlB,CADE;AAELE,IAAAA,oBAAoB,EAAE,EACpB,GAAGC,8BADiB;AAEpB,SAAGH,KAAK,CAACE;AAFW;AAFjB,GAAP,CAD0B,EAQ1B;AACAE,EAAAA,MAAM,CAACC,MAAP,CAAc,gCAAkBL,KAAlB,CAAd,CAT0B,CAA5B;AAWA,sBAAOhB,eAAMsB,aAAN,CACLvB,kBAAkB,CAACwB,QADd,EAEL;AAAEC,IAAAA,KAAK,EAAEP;AAAT,GAFK,EAGLD,KAAK,CAACS,QAHD,CAAP;AAKD","sourcesContent":["import React, { PropsWithChildren, useCallback, useMemo } from 'react';\nimport defaultListStyleSpecs from '../elements/defaultListStyleSpecs';\nimport selectSharedProps from '../helpers/selectSharedProps';\nimport { RenderHTMLSharedProps, RendererBaseProps } from '../shared-types';\nimport defaultSharedProps from './defaultSharedProps';\n\nconst SharedPropsContext = React.createContext(defaultSharedProps);\n\n/**\n * Use shared props. See {@link RenderHTMLSharedProps}.\n *\n * @public\n */\nexport function useSharedProps() {\n  return React.useContext(SharedPropsContext);\n}\n\n/**\n * @internal\n */\nexport function useDefaultContainerProps(): Pick<\n  RendererBaseProps<any>,\n  'viewProps' | 'textProps'\n> {\n  const sharedProps = useSharedProps();\n  return {\n    viewProps: {\n      ...defaultSharedProps.defaultViewProps,\n      ...sharedProps.defaultViewProps\n    },\n    textProps: {\n      ...defaultSharedProps.defaultTextProps,\n      ...sharedProps.defaultTextProps\n    }\n  };\n}\n\n/**\n * Compute max width for a given tag. Uses\n * {@link RenderHTMLProps.computeEmbeddedMaxWidth}\n * and {@link RenderHTMLProps.contentWidth} under the hood.\n *\n * @param tagName - The tag to target.\n *\n * @public\n */\nexport function useComputeMaxWidthForTag(tagName: string) {\n  const { computeEmbeddedMaxWidth } = useSharedProps();\n  return useCallback(\n    (cw: number) => {\n      return computeEmbeddedMaxWidth(cw, tagName);\n    },\n    [computeEmbeddedMaxWidth, tagName]\n  );\n}\n\n/**\n * @internal\n */\nexport default function SharedPropsProvider(\n  props: PropsWithChildren<RenderHTMLSharedProps>\n) {\n  const memoizedSharedProps = useMemo(\n    () => ({\n      ...selectSharedProps(props),\n      customListStyleSpecs: {\n        ...defaultListStyleSpecs,\n        ...props.customListStyleSpecs\n      }\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    Object.values(selectSharedProps(props))\n  );\n  return React.createElement(\n    SharedPropsContext.Provider,\n    { value: memoizedSharedProps },\n    props.children\n  );\n}\n"]}