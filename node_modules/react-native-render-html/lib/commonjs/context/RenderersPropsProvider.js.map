{"version":3,"sources":["RenderersPropsProvider.tsx"],"names":["RenderersPropsContext","React","createContext","defaultRendererProps","useRendererProps","tagName","userProps","useContext","RenderersPropsProvider","props","profile","prop","mergedRenderersProps","__DEV__","renderersProps","createElement","Provider","value","children"],"mappings":";;;;;;;;AAAA;;AACA;;AAGA;;AACA;;;;;;;;AAEA,MAAMA,qBAAqB,gBACzBC,eAAMC,aAAN,CAA8CC,6BAA9C,CADF;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,gBAAT,CAGLC,OAHK,EAGO;AACZ,QAAMC,SAAS,GAAGL,eAAMM,UAAN,CAAiBP,qBAAjB,CAAlB;;AACA,SAAOM,SAAS,CAACD,OAAD,CAAhB;AACD;AAED;AACA;AACA;;;AACe,SAASG,sBAAT,CACbC,KADa,EAEb;AACA,QAAMC,OAAO,GAAG,0BAAY;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAZ,CAAhB;AACA,QAAMC,oBAAoB,GAAG,oBAAQ,MAAM;AACzC,WAAOC,OAAP,KAAmB,SAAnB,IAAgCA,OAAhC,IAA2CH,OAAO,EAAlD;AACA,WAAO,6BAAeP,6BAAf,EAAqCM,KAAK,CAACK,cAAN,IAAwB,EAA7D,CAAP;AACD,GAH4B,EAG1B,CAACL,KAAK,CAACK,cAAP,EAAuBJ,OAAvB,CAH0B,CAA7B;AAIA,sBAAOT,eAAMc,aAAN,CACLf,qBAAqB,CAACgB,QADjB,EAEL;AAAEC,IAAAA,KAAK,EAAEL;AAAT,GAFK,EAGLH,KAAK,CAACS,QAHD,CAAP;AAKD","sourcesContent":["import React, { PropsWithChildren, useMemo } from 'react';\nimport mergeDeepRight from 'ramda/src/mergeDeepRight';\n\nimport { RenderersProps, RenderHTMLPassedProps } from '../shared-types';\nimport defaultRendererProps from './defaultRendererProps';\nimport useProfiler from '../hooks/useProfiler';\n\nconst RenderersPropsContext =\n  React.createContext<Required<RenderersProps>>(defaultRendererProps);\n\n/**\n * Consume props from {@link RenderHTMLProps.renderersProps}.\n *\n * @param tagName - The name of the element.\n * @typeParam K - The type literal corresponding to the element name.\n * @returns props for this renderer.\n *\n * @public\n */\nexport function useRendererProps<\n  RendererProps extends RenderersProps = RenderersProps,\n  K extends keyof RendererProps = keyof RendererProps\n>(tagName: K) {\n  const userProps = React.useContext(RenderersPropsContext) as RendererProps;\n  return userProps[tagName];\n}\n\n/**\n * @internal\n */\nexport default function RenderersPropsProvider(\n  props: PropsWithChildren<RenderHTMLPassedProps>\n) {\n  const profile = useProfiler({ prop: 'renderersProps' });\n  const mergedRenderersProps = useMemo(() => {\n    typeof __DEV__ === 'boolean' && __DEV__ && profile();\n    return mergeDeepRight(defaultRendererProps, props.renderersProps || {});\n  }, [props.renderersProps, profile]);\n  return React.createElement(\n    RenderersPropsContext.Provider,\n    { value: mergedRenderersProps as Required<RenderersProps> },\n    props.children\n  );\n}\n"]}