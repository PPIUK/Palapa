{"version":3,"sources":["RenderRegistryProvider.tsx"],"names":["RenderRegistryContext","React","createContext","useRendererRegistry","useContext","useRendererConfig","tnode","getRendererConfigForTNode","useInternalTextRenderer","getInternalTextRenderer","tagName","RenderRegistryProvider","children","elementModels","renderers","profile","prop","registry","__DEV__","RenderRegistry"],"mappings":";;;;;;;;;;;AACA;;AACA;;AAEA;;;;;;;;AAGO,MAAMA,qBAAqB,gBAAGC,eAAMC,aAAN,CACnC,IADmC,CAA9B;;;;AAIA,SAASC,mBAAT,GAA+B;AACpC,SAAOF,eAAMG,UAAN,CAAiBJ,qBAAjB,CAAP;AACD;;AAEM,SAASK,iBAAT,CAA4CC,KAA5C,EAAsD;AAC3D,SAAOL,eAAMG,UAAN,CAAiBJ,qBAAjB,EAAwCO,yBAAxC,CACLD,KADK,CAAP;AAGD;;AAEM,SAASE,uBAAT,CAAiCF,KAAjC,EAA+C;AACpD,SAAOL,eAAMG,UAAN,CAAiBJ,qBAAjB,EAAwCS,uBAAxC,CACLH,KAAK,CAACI,OADD,CAAP;AAGD;;AAEc,SAASC,sBAAT,CAAgC;AAC7CC,EAAAA,QAD6C;AAE7CC,EAAAA,aAF6C;AAG7CC,EAAAA;AAH6C,CAAhC,EAOX;AACF,QAAMC,OAAO,GAAG,0BAAY;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAZ,CAAhB;AACA,QAAMC,QAAQ,GAAG,oBAAQ,MAAM;AAC7B,WAAOC,OAAP,KAAmB,SAAnB,IAAgCA,OAAhC,IAA2CH,OAAO,EAAlD;AACA,WAAO,IAAII,uBAAJ,CAAmBL,SAAnB,EAA8BD,aAA9B,CAAP;AACD,GAHgB,EAGd,CAACC,SAAD,EAAYD,aAAZ,EAA2BE,OAA3B,CAHc,CAAjB;AAIA,sBACE,6BAAC,qBAAD,CAAuB,QAAvB;AAAgC,IAAA,KAAK,EAAEE;AAAvC,KACGL,QADH,CADF;AAKD","sourcesContent":["import { TNode, TText } from '@native-html/transient-render-engine';\nimport React, { PropsWithChildren, useMemo } from 'react';\nimport useProfiler from '../hooks/useProfiler';\nimport { CustomTagRendererRecord } from '../render/render-types';\nimport RenderRegistry from '../render/RenderRegistry';\nimport { HTMLElementModelRecord } from '../shared-types';\n\nexport const RenderRegistryContext = React.createContext<RenderRegistry>(\n  null as any\n);\n\nexport function useRendererRegistry() {\n  return React.useContext(RenderRegistryContext);\n}\n\nexport function useRendererConfig<T extends TNode>(tnode: T) {\n  return React.useContext(RenderRegistryContext).getRendererConfigForTNode<T>(\n    tnode\n  );\n}\n\nexport function useInternalTextRenderer(tnode: TText) {\n  return React.useContext(RenderRegistryContext).getInternalTextRenderer(\n    tnode.tagName\n  );\n}\n\nexport default function RenderRegistryProvider({\n  children,\n  elementModels,\n  renderers\n}: PropsWithChildren<{\n  elementModels: HTMLElementModelRecord;\n  renderers?: CustomTagRendererRecord;\n}>) {\n  const profile = useProfiler({ prop: 'renderers' });\n  const registry = useMemo(() => {\n    typeof __DEV__ === 'boolean' && __DEV__ && profile();\n    return new RenderRegistry(renderers, elementModels);\n  }, [renderers, elementModels, profile]);\n  return (\n    <RenderRegistryContext.Provider value={registry}>\n      {children}\n    </RenderRegistryContext.Provider>\n  );\n}\n"]}