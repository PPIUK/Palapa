{"version":3,"sources":["ARenderer.tsx"],"names":["useAnchorOnLinkPress","tnode","onPress","href","attributes","normalizedHref","baseTarget","shouldHandleLinkPress","tagName","length","e","target","undefined","useAElementProps","props","syntheticAnchorOnLinkPress","ARenderer","React","createElement","TDefaultRenderer"],"mappings":";;;;;;;;AAAA;;AAKA;;AACA;;AACA;;;;AAEA,SAASA,oBAAT,CACEC,KADF,EAEEC,OAFF,EAGE;AACA,QAAMC,IAAY,GAAGF,KAAK,CAACG,UAAN,CAAiBD,IAAtC;AACA,QAAME,cAAc,GAAG,+BAAiBF,IAAjB,CAAvB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAiB,oDAAvB;AACA,QAAMC,qBAAqB,GACzBN,KAAK,CAACO,OAAN,KAAkB,GAAlB,IACA,OAAOH,cAAP,KAA0B,QAD1B,IAEAF,IAAI,CAACM,MAAL,GAAc,CAFd,IAGA,OAAOP,OAAP,KAAmB,UAJrB;AAKA,SAAOK,qBAAqB,GACvBG,CAAD,IACER,OAAO,CACLQ,CADK,EAELL,cAFK,EAGLJ,KAAK,CAACG,UAHD,EAIJH,KAAK,CAACG,UAAN,CAAiBO,MAAlB,IACEL,UALG,CAFe,GASxBM,SATJ;AAUD;;AAEM,SAASC,gBAAT,CACLC,KADK,EAEqB;AAC1B,QAAM;AAAEb,IAAAA;AAAF,MAAYa,KAAlB;AACA,QAAM;AAAEZ,IAAAA;AAAF,MAAc,8CAAiB,GAAjB,CAApB;AACA,QAAMa,0BAA0B,GAAGf,oBAAoB,CAACC,KAAD,EAAQC,OAAR,CAAvD;;AACA,MAAI,OAAOa,0BAAP,KAAsC,UAA1C,EAAsD;AACpD,WAAOD,KAAP;AACD;;AACD,SAAO,EACL,GAAGA,KADE;AAELZ,IAAAA,OAAO,EAAEa;AAFJ,GAAP;AAID;;AAED,MAAMC,SAAgC,GAAIF,KAAD,IAAW;AAClD,sBAAOG,eAAMC,aAAN,CAAoBJ,KAAK,CAACK,gBAA1B,EAA4CN,gBAAgB,CAACC,KAAD,CAA5D,CAAP;AACD,CAFD;;eAIeE,S","sourcesContent":["import React from 'react';\nimport { InternalMixedRenderer } from '../render/render-types';\nimport { TNode, DocumentContext } from '@native-html/transient-render-engine';\nimport { InternalRendererProps, RenderersProps } from '../shared-types';\nimport { GestureResponderEvent } from 'react-native';\nimport useNormalizedUrl from '../hooks/useNormalizedUrl';\nimport { useDocumentMetadata } from '../context/DocumentMetadataProvider';\nimport { useRendererProps } from '../context/RenderersPropsProvider';\n\nfunction useAnchorOnLinkPress(\n  tnode: TNode,\n  onPress: RenderersProps['a']['onPress']\n) {\n  const href: string = tnode.attributes.href;\n  const normalizedHref = useNormalizedUrl(href);\n  const { baseTarget } = useDocumentMetadata();\n  const shouldHandleLinkPress =\n    tnode.tagName === 'a' &&\n    typeof normalizedHref === 'string' &&\n    href.length > 0 &&\n    typeof onPress === 'function';\n  return shouldHandleLinkPress\n    ? (e: GestureResponderEvent) =>\n        onPress!(\n          e,\n          normalizedHref,\n          tnode.attributes,\n          (tnode.attributes.target as DocumentContext['baseTarget']) ||\n            baseTarget\n        )\n    : undefined;\n}\n\nexport function useAElementProps<T extends TNode>(\n  props: InternalRendererProps<T>\n): InternalRendererProps<T> {\n  const { tnode } = props;\n  const { onPress } = useRendererProps('a');\n  const syntheticAnchorOnLinkPress = useAnchorOnLinkPress(tnode, onPress);\n  if (typeof syntheticAnchorOnLinkPress !== 'function') {\n    return props;\n  }\n  return {\n    ...props,\n    onPress: syntheticAnchorOnLinkPress\n  };\n}\n\nconst ARenderer: InternalMixedRenderer = (props) => {\n  return React.createElement(props.TDefaultRenderer, useAElementProps(props));\n};\n\nexport default ARenderer;\n"]}