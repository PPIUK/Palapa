{"version":3,"sources":["IMGRenderer.tsx"],"names":["useIMGElementProps","props","tnode","contentWidth","initialDimensions","enableExperimentalPercentWidth","computeImagesMaxWidth","src","attributes","source","uri","style","rawStyle","containerProps","StyleSheet","flatten","testID","computeMaxWidth","alt","altColor","styles","nativeTextFlow","color","width","height","objectFit","webBlockRet","IMGRenderer","React","createElement","IMGElement"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CACLC,KADK,EAEY;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAAYD,KAAlB;AAEA,QAAME,YAAY,GAAG,+BAArB;AACA,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MACJ,8CAAiB,KAAjB,CADF;AAEA,QAAMC,qBAAqB,GAAG,mDAAyB,KAAzB,CAA9B;AACA,QAAMC,GAAG,GAAGL,KAAK,CAACM,UAAN,CAAiBD,GAAjB,IAAwB,EAApC;AACA,QAAME,MAAM,GAAG;AAAEC,IAAAA,GAAG,EAAE,+BAAiBH,GAAjB;AAAP,GAAf;AACA,QAAM;AAAEI,IAAAA,KAAK,EAAEC,QAAT;AAAmB,OAAGC;AAAtB,MAAyC,qCAAuBZ,KAAvB,CAA/C;AACA,QAAMU,KAAK,GAAG,oBACZ,MAAOC,QAAQ,GAAIE,wBAAWC,OAAX,CAAmBH,QAAnB,CAAJ,GAAkD,EADrD,EAEZ,CAACA,QAAD,CAFY,CAAd;AAIA,SAAO;AACLT,IAAAA,YADK;AAELU,IAAAA,cAFK;AAGLR,IAAAA,8BAHK;AAILD,IAAAA,iBAJK;AAKLK,IAAAA,MALK;AAMLE,IAAAA,KANK;AAOLK,IAAAA,MAAM,EAAE,KAPH;AAQLC,IAAAA,eAAe,EAAEX,qBARZ;AASLY,IAAAA,GAAG,EAAEhB,KAAK,CAACM,UAAN,CAAiBU,GATjB;AAULC,IAAAA,QAAQ,EAAEjB,KAAK,CAACkB,MAAN,CAAaC,cAAb,CAA4BC,KAVjC;AAWLC,IAAAA,KAAK,EAAErB,KAAK,CAACM,UAAN,CAAiBe,KAXnB;AAYLC,IAAAA,MAAM,EAAEtB,KAAK,CAACM,UAAN,CAAiBgB,MAZpB;AAaLC,IAAAA,SAAS,EAAEvB,KAAK,CAACkB,MAAN,CAAaM,WAAb,CAAyBD;AAb/B,GAAP;AAeD;;AAED,MAAME,WAAkC,GAAI1B,KAAD,IAAW;AACpD,sBAAO2B,eAAMC,aAAN,CAAoBC,mBAApB,EAAgC9B,kBAAkB,CAACC,KAAD,CAAlD,CAAP;AACD,CAFD;;eAIe0B,W","sourcesContent":["import React, { useMemo } from 'react';\nimport { TBlock } from '@native-html/transient-render-engine';\nimport IMGElement, { IMGElementProps } from '../elements/IMGElement';\nimport { InternalBlockRenderer } from '../render/render-types';\nimport { useComputeMaxWidthForTag } from '../context/SharedPropsProvider';\nimport { ImageStyle, StyleSheet } from 'react-native';\nimport { InternalRendererProps } from '../shared-types';\nimport useNormalizedUrl from '../hooks/useNormalizedUrl';\nimport { useRendererProps } from '../context/RenderersPropsProvider';\nimport useContentWidth from '../hooks/useContentWidth';\nimport getNativePropsForTNode from '../helpers/getNativePropsForTNode';\n\n/**\n * A hook to produce props consumable by {@link IMGElement} component\n * from custom renderer props.\n */\nexport function useIMGElementProps(\n  props: InternalRendererProps<TBlock>\n): IMGElementProps {\n  const { tnode } = props;\n\n  const contentWidth = useContentWidth();\n  const { initialDimensions, enableExperimentalPercentWidth } =\n    useRendererProps('img');\n  const computeImagesMaxWidth = useComputeMaxWidthForTag('img');\n  const src = tnode.attributes.src || '';\n  const source = { uri: useNormalizedUrl(src) };\n  const { style: rawStyle, ...containerProps } = getNativePropsForTNode(props);\n  const style = useMemo<ImageStyle>(\n    () => (rawStyle ? (StyleSheet.flatten(rawStyle) as ImageStyle) : {}),\n    [rawStyle]\n  );\n  return {\n    contentWidth,\n    containerProps,\n    enableExperimentalPercentWidth,\n    initialDimensions,\n    source,\n    style,\n    testID: 'img',\n    computeMaxWidth: computeImagesMaxWidth,\n    alt: tnode.attributes.alt,\n    altColor: tnode.styles.nativeTextFlow.color as string,\n    width: tnode.attributes.width,\n    height: tnode.attributes.height,\n    objectFit: tnode.styles.webBlockRet.objectFit\n  };\n}\n\nconst IMGRenderer: InternalBlockRenderer = (props) => {\n  return React.createElement(IMGElement, useIMGElementProps(props));\n};\n\nexport default IMGRenderer;\n"]}