{"version":3,"sources":["BRRenderer.tsx"],"names":["emptyProps","testID","isWeb","Platform","OS","renderEmptyLineBreak","tnode","lineHeight","styles","nativeTextFlow","fontSize","height","BRRenderer","renderIndex","renderLength","sharedProps","isFirst","isLast","isLonelyBreak","shouldCollapse","enableExperimentalBRCollapsing","React","createElement","Text","isNativeInternalTextRenderer"],"mappings":";;;;;;;AACA;;AACA;;;;AAGA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE;AADS,CAAnB;AAIA,MAAMC,KAAK,GAAGC,sBAASC,EAAT,KAAgB,KAA9B;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAA4C;AAC1C,QAAMC,UAAU,GACdD,KAAK,CAACE,MAAN,CAAaC,cAAb,CAA4BF,UAA5B,IACAD,KAAK,CAACE,MAAN,CAAaC,cAAb,CAA4BC,QAA5B,GAAwC,GAF1C;AAGA,sBAAO,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEJ;AAAV;AAAb,IAAP;AACD;;AAED,MAAMK,UAAuC,GAAG,SAASA,UAAT,CAAoB;AAClEC,EAAAA,WADkE;AAElEC,EAAAA,YAFkE;AAGlEC,EAAAA,WAHkE;AAIlET,EAAAA;AAJkE,CAApB,EAK7C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMU,OAAO,GAAGH,WAAW,KAAK,CAAhC;AACA,QAAMI,MAAM,GAAGJ,WAAW,KAAKC,YAAY,GAAG,CAA9C;AACA,QAAMI,aAAa,GAAGF,OAAO,IAAIC,MAAjC;AACA,QAAME,cAAc,GAClBJ,WAAW,CAACK,8BAAZ,KACCJ,OAAO,GAAGC,MAAM,IAAI,CAACf,KAAd,GAAsBe,MAD9B,CADF;AAGA,SAAOC,aAAa,IAAIC,cAAjB,GACHd,oBAAoB,CAACC,KAAD,CADjB,gBAEHe,eAAMC,aAAN,CAAoBC,iBAApB,EAA0BvB,UAA1B,EAAsCmB,cAAc,GAAG,EAAH,GAAQ,IAA5D,CAFJ;AAGD,CAvBD;;AAyBAP,UAAU,CAACY,4BAAX,GAA0C,IAA1C;eAEeZ,U","sourcesContent":["import { TNode } from '@native-html/transient-render-engine';\nimport React from 'react';\nimport { Platform, Text, View } from 'react-native';\nimport { InternalTextContentRenderer } from '../render/render-types';\n\nconst emptyProps = {\n  testID: 'br'\n};\n\nconst isWeb = Platform.OS === 'web';\n\nfunction renderEmptyLineBreak(tnode: TNode) {\n  const lineHeight =\n    tnode.styles.nativeTextFlow.lineHeight ||\n    tnode.styles.nativeTextFlow.fontSize! * 1.4;\n  return <View style={{ height: lineHeight }} />;\n}\n\nconst BRRenderer: InternalTextContentRenderer = function BRRenderer({\n  renderIndex,\n  renderLength,\n  sharedProps,\n  tnode\n}) {\n  // If it is the last child and BR collapsing is enabled, render an empty\n  // string to prevent inserting an undesired space to follow HTML specs,\n  // unless the platform is web and it is also the first child.\n  //\n  // Note that we are taking advantage of the Ghost Line oddity in React\n  // Native, where an empty <Text /> element displays a line, since a\n  // line break opening **and** closing an inline formatting context\n  // should be printed as a one line-height item.\n  const isFirst = renderIndex === 0;\n  const isLast = renderIndex === renderLength - 1;\n  const isLonelyBreak = isFirst && isLast;\n  const shouldCollapse =\n    sharedProps.enableExperimentalBRCollapsing &&\n    (isFirst ? isLast && !isWeb : isLast);\n  return isLonelyBreak && shouldCollapse\n    ? renderEmptyLineBreak(tnode)\n    : React.createElement(Text, emptyProps, shouldCollapse ? '' : '\\n');\n};\n\nBRRenderer.isNativeInternalTextRenderer = true;\n\nexport default BRRenderer;\n"]}