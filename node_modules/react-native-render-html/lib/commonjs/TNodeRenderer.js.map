{"version":3,"sources":["TNodeRenderer.tsx"],"names":["TDefaultBlockRenderer","renderBlockContent","bind","displayName","TDefaultPhrasingRenderer","renderTextualContent","TDefaultTextRenderer","isGhostTNode","tnode","type","data","TNodeRenderer","MemoizedTNodeRenderer","props","sharedProps","renderRegistry","TNodeChildrenRenderer","tnodeProps","renderer","renderEmptyContent","assembledProps","Renderer","InternalTextRenderer","getInternalTextRenderer","tagName","React","createElement","enableExperimentalGhostLinesPrevention","bypassAnonymousTPhrasingNodes","children","length","every","renderFn","defaultProps","propsFromParent","collapsedMarginTop"],"mappings":"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","sourcesContent":["import React, { memo, ReactElement } from 'react';\nimport { TDefaultRenderer, TNodeRendererProps } from './shared-types';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport {\n  TText,\n  TBlock,\n  TNode,\n  TPhrasing\n} from '@native-html/transient-render-engine';\nimport useAssembledCommonProps from './hooks/useAssembledCommonProps';\nimport { useTNodeChildrenRenderer } from './context/TChildrenRendererContext';\nimport renderTextualContent from './renderTextualContent';\nimport { useRendererRegistry } from './context/RenderRegistryProvider';\nimport renderBlockContent from './renderBlockContent';\nimport renderEmptyContent from './renderEmptyContent';\n\nexport type { TNodeRendererProps } from './shared-types';\n\nconst TDefaultBlockRenderer: TDefaultRenderer<TBlock> =\n  renderBlockContent.bind(null);\n\nTDefaultBlockRenderer.displayName = 'TDefaultBlockRenderer';\n\nconst TDefaultPhrasingRenderer: TDefaultRenderer<TPhrasing> =\n  renderTextualContent.bind(null);\n\nTDefaultPhrasingRenderer.displayName = 'TDefaultPhrasingRenderer';\n\nconst TDefaultTextRenderer: TDefaultRenderer<TText> =\n  renderTextualContent.bind(null);\n\nTDefaultTextRenderer.displayName = 'TDefaultTextRenderer';\n\nfunction isGhostTNode(tnode: TNode) {\n  return (\n    (tnode.type === 'text' && (tnode.data === '' || tnode.data === ' ')) ||\n    tnode.type === 'empty'\n  );\n}\n\n/**\n * A component to render any {@link TNode}.\n */\nconst TNodeRenderer = memo(function MemoizedTNodeRenderer(\n  props: TNodeRendererProps<any>\n): ReactElement | null {\n  const { tnode } = props;\n  const sharedProps = useSharedProps();\n  const renderRegistry = useRendererRegistry();\n  const TNodeChildrenRenderer = useTNodeChildrenRenderer();\n  const tnodeProps = {\n    ...props,\n    TNodeChildrenRenderer,\n    sharedProps\n  };\n  const renderer =\n    tnode.type === 'block' || tnode.type === 'document'\n      ? TDefaultBlockRenderer\n      : tnode.type === 'text'\n      ? TDefaultTextRenderer\n      : tnode.type === 'phrasing'\n      ? TDefaultPhrasingRenderer\n      : renderEmptyContent;\n\n  const { assembledProps, Renderer } = useAssembledCommonProps(\n    tnodeProps,\n    renderer as any\n  );\n  switch (tnode.type) {\n    case 'empty':\n      return renderEmptyContent(assembledProps);\n    case 'text':\n      const InternalTextRenderer = renderRegistry.getInternalTextRenderer(\n        props.tnode.tagName\n      );\n\n      if (InternalTextRenderer) {\n        return React.createElement(InternalTextRenderer, tnodeProps);\n      }\n      // If ghost line prevention is enabled and the text data is empty, render\n      // nothing to avoid React Native painting a 20px height line.\n      // See also https://git.io/JErwX\n      if (\n        tnodeProps.tnode.data === '' &&\n        tnodeProps.sharedProps.enableExperimentalGhostLinesPrevention\n      ) {\n        return null;\n      }\n      break;\n    case 'phrasing':\n      // When a TPhrasing node is anonymous and has only one child, its\n      // rendering amounts to rendering its only child.\n      if (\n        tnodeProps.sharedProps.bypassAnonymousTPhrasingNodes &&\n        tnodeProps.tnode.tagName == null &&\n        tnodeProps.tnode.children.length <= 1\n      ) {\n        return React.createElement(TNodeChildrenRenderer, {\n          tnode: props.tnode\n        });\n      }\n      // If ghost line prevention is enabled and the tnode is an anonymous empty\n      // phrasing node, render nothing to avoid React Native painting a 20px\n      // height line. See also https://git.io/JErwX\n      if (\n        tnodeProps.sharedProps.enableExperimentalGhostLinesPrevention &&\n        tnodeProps.tnode.tagName == null &&\n        tnodeProps.tnode.children.every(isGhostTNode)\n      ) {\n        return null;\n      }\n      break;\n  }\n  const renderFn =\n    tnode.type === 'block' || tnode.type === 'document'\n      ? renderBlockContent\n      : renderTextualContent;\n  return Renderer === null\n    ? renderFn(assembledProps)\n    : React.createElement(Renderer as any, assembledProps);\n});\n\nconst defaultProps: Required<Pick<TNodeRendererProps<any>, 'propsFromParent'>> =\n  {\n    propsFromParent: {\n      collapsedMarginTop: null\n    }\n  };\n\n// @ts-expect-error default props must be defined\nTNodeRenderer.defaultProps = defaultProps;\n\nexport {\n  TDefaultBlockRenderer,\n  TDefaultPhrasingRenderer,\n  TDefaultTextRenderer\n};\n\nexport default TNodeRenderer;\n"]}