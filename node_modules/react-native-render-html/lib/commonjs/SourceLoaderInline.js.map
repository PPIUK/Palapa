{"version":3,"sources":["SourceLoaderInline.tsx"],"names":["useInlineSourceLoader","source","onHTMLLoaded","html","call","SourceLoaderInline","props","React","createElement","RenderTTree","document","baseUrl"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;AAOA,SAASA,qBAAT,CAA+B;AAC7BC,EAAAA,MAD6B;AAE7BC,EAAAA;AAF6B,CAA/B,EAG4B;AAC1B,QAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AACA,wBAAU,MAAM;AACdA,IAAAA,IAAI,KAAID,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEE,IAAd,CAAmB,IAAnB,EAAyBD,IAAzB,CAAJ,CAAJ;AACD,GAFD,EAEG,CAACA,IAAD,EAAOD,YAAP,CAFH;AAGA,SAAOD,MAAP;AACD;;AAEc,SAASI,kBAAT,CAA4BC,KAA5B,EAA4D;AACzE,QAAM;AAAEH,IAAAA;AAAF,MAAWH,qBAAqB,CAACM,KAAD,CAAtC;AACA,sBAAOC,eAAMC,aAAN,CAAoBC,oBAApB,EAAiC;AACtCC,IAAAA,QAAQ,EAAEP,IAD4B;AAEtCQ,IAAAA,OAAO,EAAEL,KAAK,CAACL,MAAN,CAAaU;AAFgB,GAAjC,CAAP;AAID","sourcesContent":["import React, { useEffect } from 'react';\nimport { SourceLoaderProps } from './internal-types';\nimport RenderTTree from './RenderTTree';\nimport { HTMLSourceInline } from './shared-types';\n\nexport type InlineSourceLoaderProps = {\n  source: HTMLSourceInline;\n} & SourceLoaderProps;\n\nfunction useInlineSourceLoader({\n  source,\n  onHTMLLoaded\n}: InlineSourceLoaderProps) {\n  const html = source.html;\n  useEffect(() => {\n    html && onHTMLLoaded?.call(null, html);\n  }, [html, onHTMLLoaded]);\n  return source;\n}\n\nexport default function SourceLoaderInline(props: InlineSourceLoaderProps) {\n  const { html } = useInlineSourceLoader(props);\n  return React.createElement(RenderTTree, {\n    document: html,\n    baseUrl: props.source.baseUrl\n  });\n}\n"]}