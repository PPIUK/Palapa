{"version":3,"sources":["IMGElement.tsx"],"names":["identity","arg","IMGElement","props","state","content","type","React","createElement","IMGElementContentSuccess","IMGElementContentLoading","IMGElementContentError","testID","containerProps","onPress","containerStyle","imgDimensionsType","PropTypes","shape","width","number","height","propTypes","source","object","isRequired","alt","string","altColor","oneOfType","style","array","computeMaxWidth","func","contentWidth","enableExperimentalPercentWidth","bool","initialDimensions","objectFit","cachedNaturalDimensions","defaultProps","imagesInitialDimensions","defaultImageInitialDimensions"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAIA,SAASA,QAAT,CAAkBC,GAAlB,EAA4B;AAC1B,SAAOA,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA0D;AACxD,QAAMC,KAAK,GAAG,iCAAmBD,KAAnB,CAAd;AACA,MAAIE,OAAJ;;AACA,MAAID,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;AAC5BD,IAAAA,OAAO,gBAAGE,eAAMC,aAAN,CAAoBC,iCAApB,EAA8CL,KAA9C,CAAV;AACD,GAFD,MAEO,IAAIA,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;AACnCD,IAAAA,OAAO,gBAAGE,eAAMC,aAAN,CAAoBE,iCAApB,EAA8CN,KAA9C,CAAV;AACD,GAFM,MAEA;AACLC,IAAAA,OAAO,gBAAGE,eAAMC,aAAN,CAAoBG,+BAApB,EAA4CP,KAA5C,CAAV;AACD;;AACD,sBACE,6BAAC,4BAAD;AACE,IAAA,MAAM,EAAED,KAAK,CAACS;AADhB,KAEMT,KAAK,CAACU,cAFZ;AAGE,IAAA,OAAO,EAAEV,KAAK,CAACW,OAHjB;AAIE,IAAA,KAAK,EAAEV,KAAK,CAACW;AAJf,MAKGV,OALH,CADF;AASD;;AAED,MAAMW,iBAAiB,GAAGC,mBAAUC,KAAV,CAAgB;AACxCC,EAAAA,KAAK,EAAEF,mBAAUG,MADuB;AAExCC,EAAAA,MAAM,EAAEJ,mBAAUG;AAFsB,CAAhB,CAA1B;;AAKA,MAAME,SAA6C,GAAG;AACpDC,EAAAA,MAAM,EAAEN,mBAAUO,MAAV,CAAiBC,UAD2B;AAEpDC,EAAAA,GAAG,EAAET,mBAAUU,MAFqC;AAGpDC,EAAAA,QAAQ,EAAEX,mBAAUU,MAHgC;AAIpDN,EAAAA,MAAM,EAAEJ,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUU,MAAX,EAAmBV,mBAAUG,MAA7B,CAApB,CAJ4C;AAKpDD,EAAAA,KAAK,EAAEF,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUU,MAAX,EAAmBV,mBAAUG,MAA7B,CAApB,CAL6C;AAMpDU,EAAAA,KAAK,EAAEb,mBAAUY,SAAV,CAAoB,CAACZ,mBAAUO,MAAX,EAAmBP,mBAAUc,KAA7B,CAApB,CAN6C;AAOpDC,EAAAA,eAAe,EAAEf,mBAAUgB,IAAV,CAAeR,UAPoB;AAQpDS,EAAAA,YAAY,EAAEjB,mBAAUG,MAR4B;AASpDe,EAAAA,8BAA8B,EAAElB,mBAAUmB,IATU;AAUpDC,EAAAA,iBAAiB,EAAErB,iBAViC;AAWpDF,EAAAA,OAAO,EAAEG,mBAAUgB,IAXiC;AAYpDrB,EAAAA,MAAM,EAAEK,mBAAUU,MAZkC;AAapDW,EAAAA,SAAS,EAAErB,mBAAUU,MAb+B;AAcpDY,EAAAA,uBAAuB,EAAEvB,iBAd2B;AAepDH,EAAAA,cAAc,EAAEI,mBAAUO;AAf0B,CAAtD;AAkBA;AACA;AACA;;AACAtB,UAAU,CAACoB,SAAX,GAAuBA,SAAvB;AAEA;AACA;AACA;;AACApB,UAAU,CAACsC,YAAX,GAA0B;AACxBL,EAAAA,8BAA8B,EAAE,KADR;AAExBH,EAAAA,eAAe,EAAEhC,QAFO;AAGxByC,EAAAA,uBAAuB,EAAEC,sCAHD;AAIxBZ,EAAAA,KAAK,EAAE;AAJiB,CAA1B;eAOe5B,U","sourcesContent":["import React, { ReactElement, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport useIMGElementState from './useIMGElementState';\nimport IMGElementContentSuccess from './IMGElementContentSuccess';\nimport IMGElementContainer from './IMGElementContainer';\nimport IMGElementContentLoading from './IMGElementContentLoading';\nimport IMGElementContentError from './IMGElementContentError';\nimport type { IMGElementProps } from './img-types';\nimport defaultImageInitialDimensions from './defaultInitialImageDimensions';\n\nexport type { IMGElementProps } from './img-types';\n\nfunction identity(arg: any) {\n  return arg;\n}\n\n/**\n * A component to render images based on an internal loading state.\n *\n * @remarks This component will attempt to draw a box of paint dimensions\n * before retrieving the physical dimensions of the image to avoid layout\n * shifts. See also {@link useIMGElementState}, {@link IMGElementContainer},\n * {@link IMGElementContentSuccess}, {@link IMGElementContentLoading}\n * and {@link IMGElementContentError} for customization.\n */\nfunction IMGElement(props: IMGElementProps): ReactElement {\n  const state = useIMGElementState(props);\n  let content: ReactNode;\n  if (state.type === 'success') {\n    content = React.createElement(IMGElementContentSuccess, state);\n  } else if (state.type === 'loading') {\n    content = React.createElement(IMGElementContentLoading, state);\n  } else {\n    content = React.createElement(IMGElementContentError, state);\n  }\n  return (\n    <IMGElementContainer\n      testID={props.testID}\n      {...props.containerProps}\n      onPress={props.onPress}\n      style={state.containerStyle}>\n      {content}\n    </IMGElementContainer>\n  );\n}\n\nconst imgDimensionsType = PropTypes.shape({\n  width: PropTypes.number,\n  height: PropTypes.number\n});\n\nconst propTypes: Record<keyof IMGElementProps, any> = {\n  source: PropTypes.object.isRequired,\n  alt: PropTypes.string,\n  altColor: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  computeMaxWidth: PropTypes.func.isRequired,\n  contentWidth: PropTypes.number,\n  enableExperimentalPercentWidth: PropTypes.bool,\n  initialDimensions: imgDimensionsType,\n  onPress: PropTypes.func,\n  testID: PropTypes.string,\n  objectFit: PropTypes.string,\n  cachedNaturalDimensions: imgDimensionsType,\n  containerProps: PropTypes.object\n};\n\n/**\n * @ignore\n */\nIMGElement.propTypes = propTypes;\n\n/**\n * @ignore\n */\nIMGElement.defaultProps = {\n  enableExperimentalPercentWidth: false,\n  computeMaxWidth: identity,\n  imagesInitialDimensions: defaultImageInitialDimensions,\n  style: {}\n};\n\nexport default IMGElement;\n"]}