{"version":3,"sources":["useImageConcreteDimensions.ts"],"names":["extractHorizontalSpace","marginHorizontal","leftMargin","rightMargin","margin","realLeftMargin","realRightMargin","scaleUp","minDimensions","desiredDimensions","aspectRatio","width","height","scaleDown","maxDimensions","scale","minBox","maxBox","originalBox","computeConcreteDimensions","params","computeMaxWidth","contentWidth","flattenStyles","naturalWidth","naturalHeight","specifiedWidth","specifiedHeight","horizontalSpace","maxWidth","Infinity","maxHeight","minWidth","minHeight","imagesMaxWidth","Math","min","useImageConcreteDimensions","flatStyle","naturalDimensions","specifiedDimensions"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport { ImageStyle } from 'react-native';\nimport { ImageDimensions } from '../shared-types';\nimport {\n  IncompleteImageDimensions,\n  UseIMGElementStateProps\n} from './img-types';\n\nexport type ConcreteDimensionsProps = {\n  flatStyle: ImageStyle;\n  naturalDimensions: ImageDimensions | null;\n  specifiedDimensions: IncompleteImageDimensions;\n} & Pick<UseIMGElementStateProps, 'computeMaxWidth' | 'contentWidth'>;\n\nfunction extractHorizontalSpace({\n  marginHorizontal,\n  leftMargin,\n  rightMargin,\n  margin\n}: any) {\n  const realLeftMargin = leftMargin || marginHorizontal || margin || 0;\n  const realRightMargin = rightMargin || marginHorizontal || margin || 0;\n  return realLeftMargin + realRightMargin;\n}\n\nfunction scaleUp(\n  minDimensions: ImageDimensions,\n  desiredDimensions: ImageDimensions\n): ImageDimensions {\n  const aspectRatio = desiredDimensions.width / desiredDimensions.height;\n  if (desiredDimensions.width < minDimensions.width) {\n    return scaleUp(minDimensions, {\n      width: minDimensions.width,\n      height: minDimensions.width / aspectRatio\n    });\n  }\n  if (desiredDimensions.height < minDimensions.height) {\n    return scaleUp(minDimensions, {\n      height: minDimensions.height,\n      width: minDimensions.height * aspectRatio\n    });\n  }\n  return desiredDimensions;\n}\n\nfunction scaleDown(\n  maxDimensions: ImageDimensions,\n  desiredDimensions: ImageDimensions\n): ImageDimensions {\n  const aspectRatio = desiredDimensions.width / desiredDimensions.height;\n  if (desiredDimensions.width > maxDimensions.width) {\n    return scaleDown(maxDimensions, {\n      width: maxDimensions.width,\n      height: maxDimensions.width / aspectRatio\n    });\n  }\n  if (desiredDimensions.height > maxDimensions.height) {\n    return scaleDown(maxDimensions, {\n      height: maxDimensions.height,\n      width: maxDimensions.height * aspectRatio\n    });\n  }\n  return desiredDimensions;\n}\n\nfunction scale(\n  { minBox, maxBox }: { maxBox: ImageDimensions; minBox: ImageDimensions },\n  originalBox: ImageDimensions\n) {\n  return scaleDown(maxBox, scaleUp(minBox, originalBox));\n}\n\nfunction computeConcreteDimensions(params: any) {\n  const {\n    computeMaxWidth,\n    contentWidth,\n    flattenStyles,\n    naturalWidth,\n    naturalHeight,\n    specifiedWidth,\n    specifiedHeight\n  } = params;\n  const horizontalSpace = extractHorizontalSpace(flattenStyles);\n  const {\n    maxWidth = Infinity,\n    maxHeight = Infinity,\n    minWidth = 0,\n    minHeight = 0\n  } = flattenStyles;\n  const imagesMaxWidth =\n    typeof contentWidth === 'number' ? computeMaxWidth(contentWidth) : Infinity;\n  const minBox = {\n    width: minWidth,\n    height: minHeight\n  };\n  const maxBox = {\n    width:\n      Math.min(\n        imagesMaxWidth,\n        maxWidth,\n        typeof specifiedWidth === 'number' ? specifiedWidth : Infinity\n      ) - horizontalSpace,\n    height: Math.min(\n      typeof specifiedHeight === 'number' ? specifiedHeight : Infinity,\n      maxHeight\n    )\n  };\n  if (\n    typeof specifiedWidth === 'number' &&\n    typeof specifiedHeight === 'number'\n  ) {\n    return scale(\n      { minBox, maxBox },\n      {\n        width: specifiedWidth,\n        height: specifiedHeight\n      }\n    );\n  }\n  if (naturalWidth != null && naturalHeight != null) {\n    return scale(\n      { minBox, maxBox },\n      {\n        width: naturalWidth,\n        height: naturalHeight\n      }\n    );\n  }\n  return null;\n}\n\nexport default function useImageConcreteDimensions<\n  P extends ConcreteDimensionsProps\n>({\n  flatStyle,\n  naturalDimensions,\n  specifiedDimensions,\n  computeMaxWidth,\n  contentWidth\n}: P): P['naturalDimensions'] extends ImageDimensions\n  ? ImageDimensions\n  : ImageDimensions | null {\n  return useMemo(() => {\n    return computeConcreteDimensions({\n      flattenStyles: flatStyle,\n      computeMaxWidth,\n      contentWidth,\n      naturalWidth: naturalDimensions?.width,\n      naturalHeight: naturalDimensions?.height,\n      specifiedWidth: specifiedDimensions.width,\n      specifiedHeight: specifiedDimensions.height\n    }) as any;\n  }, [\n    computeMaxWidth,\n    contentWidth,\n    flatStyle,\n    naturalDimensions,\n    specifiedDimensions.height,\n    specifiedDimensions.width\n  ]);\n}\n"]}