{"version":3,"sources":["useImageSpecifiedDimensions.ts"],"names":["normalizeSize","dimension","options","containerDimension","enablePercentWidth","undefined","Number","isNaN","search","parseFloat","trim","match","deriveSpecifiedDimensionsFromProps","width","height","contentWidth","flatStyle","enableExperimentalPercentWidth","normalizeOptionsWidth","normalizeOptionsHeight","widthProp","heightProp","styleWidth","styleHeight","aspectRatio","useImageSpecifiedDimensions","props","style","StyleSheet","flatten","specifiedDimensions"],"mappings":";;;;;;;AAAA;;AAKA;;AACA;;;;AAEA,SAASA,aAAT,CACEC,SADF,EAEEC,OAFF,EAME;AACA,QAAMC,kBAAkB,GAAGD,OAAO,CAACC,kBAAR,IAA8B,IAAzD;AACA,QAAMC,kBAAkB,GAAGF,OAAO,CAACE,kBAAR,IAA8B,KAAzD;;AACA,MACEH,SAAS,KAAK,IAAd,IACAA,SAAS,KAAKI,SADd,IAEAC,MAAM,CAACC,KAAP,CAAaN,SAAb,CAHF,EAIE;AACA,WAAO,IAAP;AACD;;AACD,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAOA,SAAP;AACD;;AACD,MACEA,SAAS,CAACO,MAAV,CAAiB,GAAjB,MAA0B,CAAC,CAA3B,IACAJ,kBADA,IAEA,OAAOD,kBAAP,KAA8B,QAHhC,EAIE;AACA,WAAQM,UAAU,CAACR,SAAD,CAAV,GAAwBE,kBAAzB,GAA+C,GAAtD;AACD,GAND,MAMO,IAAIF,SAAS,CAACS,IAAV,GAAiBC,KAAjB,CAAuB,UAAvB,CAAJ,EAAwC;AAC7C,WAAOF,UAAU,CAACR,SAAD,CAAjB;AACD;;AACD,SAAO,IAAP;AACD;AAED;AACA;AACA;;;AACA,SAASW,kCAAT,CAA4C;AAC1CC,EAAAA,KAD0C;AAE1CC,EAAAA,MAF0C;AAG1CC,EAAAA,YAH0C;AAI1CC,EAAAA,SAJ0C;AAK1CC,EAAAA,8BAA8B,EAAEb;AALU,CAA5C,EASmE;AACjE,QAAMc,qBAAqB,GAAG;AAC5Bd,IAAAA,kBAD4B;AAE5BD,IAAAA,kBAAkB,EAAEY;AAFQ,GAA9B;AAIA,QAAMI,sBAAsB,GAAG;AAC7Bf,IAAAA,kBAAkB,EAAE;AADS,GAA/B;AAGA,QAAMgB,SAAS,GAAGpB,aAAa,CAACa,KAAD,EAAQK,qBAAR,CAA/B;AACA,QAAMG,UAAU,GAAGrB,aAAa,CAACc,MAAD,EAASK,sBAAT,CAAhC;AACA,QAAMG,UAAU,GAAGtB,aAAa,CAACgB,SAAS,CAACH,KAAX,EAAkBK,qBAAlB,CAAhC;AACA,QAAMK,WAAW,GAAGvB,aAAa,CAACgB,SAAS,CAACF,MAAX,EAAmBK,sBAAnB,CAAjC;AACA,SAAO,2CACLG,UADK,aACLA,UADK,cACLA,UADK,GACSF,SADT,EAELG,WAFK,aAELA,WAFK,cAELA,WAFK,GAEUF,UAFV,EAGLL,SAAS,CAACQ,WAHL,CAAP;AAKD;;AAEc,SAASC,2BAAT,CACbC,KADa,EAEb;AACA,QAAM;AAAEX,IAAAA,YAAF;AAAgBE,IAAAA,8BAAhB;AAAgDU,IAAAA,KAAhD;AAAuDd,IAAAA,KAAvD;AAA8DC,IAAAA;AAA9D,MACJY,KADF;AAEA,QAAMV,SAAS,GAAG,oBAAQ,MAAMY,wBAAWC,OAAX,CAAmBF,KAAnB,KAA6B,EAA3C,EAA+C,CAACA,KAAD,CAA/C,CAAlB;AACA,QAAMG,mBAAmB,GAAG,oBAC1B,MACElB,kCAAkC,CAAC;AACjCG,IAAAA,YADiC;AAEjCE,IAAAA,8BAFiC;AAGjCJ,IAAAA,KAHiC;AAIjCC,IAAAA,MAJiC;AAKjCE,IAAAA;AALiC,GAAD,CAFV,EAS1B,CAACD,YAAD,EAAeE,8BAAf,EAA+CD,SAA/C,EAA0DF,MAA1D,EAAkED,KAAlE,CAT0B,CAA5B;AAWA,SAAO;AAAEG,IAAAA,SAAF;AAAac,IAAAA;AAAb,GAAP;AACD","sourcesContent":["import { useMemo } from 'react';\nimport {\n  UseIMGElementStateProps,\n  IncompleteImageDimensions\n} from './img-types';\nimport getDimensionsWithAspectRatio from './getDimensionsWithAspectRatio';\nimport { StyleSheet } from 'react-native';\n\nfunction normalizeSize(\n  dimension: string | number | null | undefined,\n  options: Partial<{\n    containerDimension: number | null;\n    enablePercentWidth: boolean;\n  }>\n) {\n  const containerDimension = options.containerDimension || null;\n  const enablePercentWidth = options.enablePercentWidth || false;\n  if (\n    dimension === null ||\n    dimension === undefined ||\n    Number.isNaN(dimension)\n  ) {\n    return null;\n  }\n  if (typeof dimension === 'number') {\n    return dimension;\n  }\n  if (\n    dimension.search('%') !== -1 &&\n    enablePercentWidth &&\n    typeof containerDimension === 'number'\n  ) {\n    return (parseFloat(dimension) * containerDimension) / 100;\n  } else if (dimension.trim().match(/^[\\d.]+$/)) {\n    return parseFloat(dimension);\n  }\n  return null;\n}\n\n/**\n * Extract specified dimensions from props.\n */\nfunction deriveSpecifiedDimensionsFromProps({\n  width,\n  height,\n  contentWidth,\n  flatStyle,\n  enableExperimentalPercentWidth: enablePercentWidth\n}: Pick<\n  UseIMGElementStateProps,\n  'width' | 'height' | 'contentWidth' | 'enableExperimentalPercentWidth'\n> & { flatStyle: Record<string, any> }): IncompleteImageDimensions {\n  const normalizeOptionsWidth = {\n    enablePercentWidth,\n    containerDimension: contentWidth\n  };\n  const normalizeOptionsHeight = {\n    enablePercentWidth: false\n  };\n  const widthProp = normalizeSize(width, normalizeOptionsWidth);\n  const heightProp = normalizeSize(height, normalizeOptionsHeight);\n  const styleWidth = normalizeSize(flatStyle.width, normalizeOptionsWidth);\n  const styleHeight = normalizeSize(flatStyle.height, normalizeOptionsHeight);\n  return getDimensionsWithAspectRatio(\n    styleWidth ?? widthProp,\n    styleHeight ?? heightProp,\n    flatStyle.aspectRatio\n  );\n}\n\nexport default function useImageSpecifiedDimensions(\n  props: UseIMGElementStateProps\n) {\n  const { contentWidth, enableExperimentalPercentWidth, style, width, height } =\n    props;\n  const flatStyle = useMemo(() => StyleSheet.flatten(style) || {}, [style]);\n  const specifiedDimensions = useMemo(\n    () =>\n      deriveSpecifiedDimensionsFromProps({\n        contentWidth,\n        enableExperimentalPercentWidth,\n        width,\n        height,\n        flatStyle\n      }),\n    [contentWidth, enableExperimentalPercentWidth, flatStyle, height, width]\n  );\n  return { flatStyle, specifiedDimensions };\n}\n"]}