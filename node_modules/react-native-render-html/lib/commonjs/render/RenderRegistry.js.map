{"version":3,"sources":["RenderRegistry.ts"],"names":["internalTextRenderers","br","BRRenderer","wbr","WBRRenderer","RenderRegistry","constructor","customRenderers","elementModels","getCustomRendererForTNode","tnode","tagName","renderer","__DEV__","elementModel","console","warn","matchContentModel","contentModel","displayName","getDefaultRendererForTNode","internalRenderers","getInternalTextRenderer","getRendererConfigForTNode","Custom","Default"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AAMA;;;;;;AAMA,MAAMA,qBAAkE,GAAG;AACzEC,EAAAA,EAAE,EAAEC,mBADqE;AAEzEC,EAAAA,GAAG,EAAEC;AAFoE,CAA3E;;AAUe,MAAMC,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CACTC,eAAwC,GAAG,EADlC,EAETC,aAFS,EAGT;AAAA,6CAK0D,EAL1D;;AAAA;;AACA,SAAKD,eAAL,GAAuBA,eAAvB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACD;;AAKOC,EAAAA,yBAAyB,CAC/BC,KAD+B,EAEe;AAC9C,QAAIA,KAAK,CAACC,OAAN,IAAkB,KAAKJ,eAA3B,EAA4C;AAC1C,YAAMK,QAAQ,GAAG,KAAKL,eAAL,CAAqBG,KAAK,CAACC,OAA3B,CAAjB;AACA;;AACA,UAAI,OAAOE,OAAP,KAAmB,SAAnB,IAAgCA,OAApC,EAA6C;AAC3C;AACA,cAAMC,YAAY,GAAG,KAAKN,aAAL,CAAmBE,KAAK,CAACC,OAAzB,CAArB;;AACA,YAAI,CAACG,YAAL,EAAmB;AACjBC,UAAAA,OAAO,CAACC,IAAR,CACG,kCAAiCN,KAAK,CAACC,OAAS,kIADnD;AAGD,SAJD,MAIO,IAAI,CAACD,KAAK,CAACO,iBAAN,CAAwBH,YAAY,CAACI,YAArC,CAAL,EAAyD;AAC9DH,UAAAA,OAAO,CAACC,IAAR,CACG,iCAAgCN,KAAK,CAACC,OAAQ,cAAaD,KAAK,CAACS,WAAY,2DAA0DL,YAAxI,aAAwIA,YAAxI,uBAAwIA,YAAY,CAAEI,YAAa,gCAA+BR,KAAK,CAACS,WAAY,IADtN;AAGD;AACF;;AACD,aAAOP,QAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEOQ,EAAAA,0BAA0B,CAChCV,KADgC,EAEJ;AAC5B,QAAIA,KAAK,CAACC,OAAN,IAAkBU,0BAAtB,EAAyC;AACvC;AACA,aAAOA,2BAAkBX,KAAK,CAACC,OAAxB,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDW,EAAAA,uBAAuB,CAACX,OAAD,EAAyB;AAC9C,QAAI,2BAAaX,qBAAb,EAAoCW,OAApC,CAAJ,EAAkD;AAChD,aAAOX,qBAAqB,CAACW,OAAD,CAA5B;AACD;;AACD,WAAO,IAAP;AACD;;AAEDY,EAAAA,yBAAyB,CAAkBb,KAAlB,EAA+C;AACtE,WAAO;AACLc,MAAAA,MAAM,EAAE,KAAKf,yBAAL,CAA+BC,KAA/B,CADH;AAELe,MAAAA,OAAO,EAAE,KAAKL,0BAAL,CAAgCV,KAAhC;AAFJ,KAAP;AAID;;AA1DiC","sourcesContent":["import { TNode } from '@native-html/transient-render-engine';\nimport { ComponentType } from 'react';\nimport { CustomRendererProps } from '..';\nimport lookupRecord from '../helpers/lookupRecord';\nimport BRRenderer from '../renderers/BRRenderer';\nimport WBRRenderer from '../renderers/WBRRenderer';\nimport {\n  CustomRenderer,\n  HTMLElementModelRecord,\n  InternalRenderer\n} from '../shared-types';\nimport internalRenderers from './internalRenderers';\nimport {\n  CustomTagRendererRecord,\n  InternalTextContentRenderer\n} from './render-types';\n\nconst internalTextRenderers: Record<string, InternalTextContentRenderer> = {\n  br: BRRenderer,\n  wbr: WBRRenderer\n};\n\nexport interface RendererConfig<T extends TNode> {\n  Custom: CustomRenderer<T> | null;\n  Default: InternalRenderer<T> | null;\n}\n\nexport default class RenderRegistry {\n  constructor(\n    customRenderers: CustomTagRendererRecord = {},\n    elementModels: HTMLElementModelRecord\n  ) {\n    this.customRenderers = customRenderers;\n    this.elementModels = elementModels;\n  }\n\n  private readonly customRenderers: CustomTagRendererRecord = {};\n  private readonly elementModels: HTMLElementModelRecord;\n\n  private getCustomRendererForTNode<T extends TNode>(\n    tnode: T\n  ): ComponentType<CustomRendererProps<T>> | null {\n    if (tnode.tagName! in this.customRenderers) {\n      const renderer = this.customRenderers[tnode.tagName!];\n      /* istanbul ignore next */\n      if (typeof __DEV__ === 'boolean' && __DEV__) {\n        // In DEV, check for discrepancies.\n        const elementModel = this.elementModels[tnode.tagName!];\n        if (!elementModel) {\n          console.warn(\n            `You are attempting to render a ${tnode.tagName!} tag but you didn't provide an HTMLElementModel. Make sure you register a model for this tag in \"customHTMLElementModels\" prop. `\n          );\n        } else if (!tnode.matchContentModel(elementModel.contentModel)) {\n          console.warn(\n            `You are attempting to render \"${tnode.tagName}\" of type \"${tnode.displayName}\", but the registered renderer is of content model type ${elementModel?.contentModel} which is incompatible with \"${tnode.displayName}\".`\n          );\n        }\n      }\n      return renderer as any;\n    }\n    return null;\n  }\n\n  private getDefaultRendererForTNode<T extends TNode>(\n    tnode: T\n  ): InternalRenderer<T> | null {\n    if (tnode.tagName! in internalRenderers) {\n      //@ts-expect-error we know that the tagName is in the map\n      return internalRenderers[tnode.tagName!];\n    }\n    return null;\n  }\n\n  getInternalTextRenderer(tagName: string | null) {\n    if (lookupRecord(internalTextRenderers, tagName)) {\n      return internalTextRenderers[tagName];\n    }\n    return null;\n  }\n\n  getRendererConfigForTNode<T extends TNode>(tnode: T): RendererConfig<T> {\n    return {\n      Custom: this.getCustomRendererForTNode(tnode),\n      Default: this.getDefaultRendererForTNode(tnode)\n    };\n  }\n}\n"]}