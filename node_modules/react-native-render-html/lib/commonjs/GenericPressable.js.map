{"version":3,"sources":["GenericPressable.tsx"],"names":["GenericPressable","style","children","borderless","otherProps","pressableHightlightColor","UserProvidedPressable","Platform","OS","TouchableNativeFeedback","Ripple"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;;;;;AAGe,SAASA,gBAAT,CAA0B;AACvCC,EAAAA,KADuC;AAEvCC,EAAAA,QAFuC;AAGvCC,EAAAA,UAAU,GAAG,KAH0B;AAIvC,KAAGC;AAJoC,CAA1B,EAK8B;AAC3C,QAAM;AAAEC,IAAAA,wBAAF;AAA4BL,IAAAA,gBAAgB,EAAEM;AAA9C,MACJ,0CADF;;AAEA,MAAIA,qBAAJ,EAA2B;AACzB,wBACE,6BAAC,qBAAD;AACE,MAAA,KAAK,EAAEL,KADT;AAEE,MAAA,UAAU,EAAEE;AAFd,OAGOC,UAHP,GAIGF,QAJH,CADF;AAQD;;AACD,MAAIK,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B;AACA;AACA,wBACE,6BAAC,iBAAD;AAAM,MAAA,KAAK,EAAEP;AAAb,oBACE,6BAAC,oCAAD;AACE,MAAA,aAAa,MADf;AAEE,MAAA,UAAU,EAAEQ,qCAAwBC,MAAxB,CACVL,wBADU,EAEVF,UAFU;AAFd,OAMOC,UANP,gBAOE,6BAAC,iBAAD;AAAM,MAAA,MAAM,EAAC;AAAb,OAAkCF,QAAlC,CAPF,CADF,CADF;AAaD;;AACD,sBACE,6BAAC,+BAAD;AACE,IAAA,aAAa,EAAEG,wBADjB;AAEE,IAAA,KAAK,EAAEJ;AAFT,KAGOG,UAHP,gBAIE,6BAAC,iBAAD;AAAM,IAAA,MAAM,EAAC;AAAb,KAAkCF,QAAlC,CAJF,CADF;AAQD","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport {\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  View\n} from 'react-native';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport { GenericPressableProps } from './shared-types';\n\nexport default function GenericPressable({\n  style,\n  children,\n  borderless = false,\n  ...otherProps\n}: PropsWithChildren<GenericPressableProps>) {\n  const { pressableHightlightColor, GenericPressable: UserProvidedPressable } =\n    useSharedProps();\n  if (UserProvidedPressable) {\n    return (\n      <UserProvidedPressable\n        style={style}\n        borderless={borderless}\n        {...(otherProps as any)}>\n        {children}\n      </UserProvidedPressable>\n    );\n  }\n  if (Platform.OS === 'android') {\n    // TouchableNativeFeedback does not support a\n    // style prop. So we must wrap it inside a View.\n    return (\n      <View style={style}>\n        <TouchableNativeFeedback\n          useForeground\n          background={TouchableNativeFeedback.Ripple(\n            pressableHightlightColor,\n            borderless\n          )}\n          {...(otherProps as any)}>\n          <View testID=\"generic-pressable\">{children}</View>\n        </TouchableNativeFeedback>\n      </View>\n    );\n  }\n  return (\n    <TouchableHighlight\n      underlayColor={pressableHightlightColor}\n      style={style}\n      {...(otherProps as any)}>\n      <View testID=\"generic-pressable\">{children}</View>\n    </TouchableHighlight>\n  );\n}\n"]}