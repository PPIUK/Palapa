{"version":3,"sources":["SourceLoaderUri.tsx"],"names":["ERROR_STATE","error","resolvedHTML","loadHTMLResource","uri","body","headers","method","response","fetch","ok","html","text","useUriSourceLoader","source","onHTMLLoaded","loadState","setState","cancelled","then","state","catch","call","SourceLoaderUri","props","remoteErrorView","remoteLoadingView","sourceLoaderContext","React","createElement","RenderTTree","document","baseUrl"],"mappings":";;;;;;;AAAA;;AAGA;;AACA;;;;;;;;AAOA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,IADW;AAElBC,EAAAA,YAAY,EAAE;AAFI,CAApB;;AAKA,eAAeC,gBAAf,CACEC,GADF,EAEE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA;AAAjB,CAFF,EAGgC;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAChCC,IAAAA,IADgC;AAEhCC,IAAAA,OAFgC;AAGhCC,IAAAA;AAHgC,GAAN,CAA5B;;AAKA,MAAIC,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACA,WAAO;AACLV,MAAAA,YAAY,EAAES,IADT;AAELV,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;;AACD,SAAOD,WAAP;AACD;;AAMD,SAASa,kBAAT,CAA4B;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAA5B,EAA4E;AAC1E,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwB,qBAA8B;AAC1DhB,IAAAA,KAAK,EAAE,KADmD;AAE1DC,IAAAA,YAAY,EAAE;AAF4C,GAA9B,CAA9B;AAIA,QAAM;AAAED,IAAAA;AAAF,MAAYe,SAAlB,CAL0E,CAO1E;;AACA,wBAAU,MAAM;AACd,QAAIE,SAAS,GAAG,KAAhB;;AACA,QAAI,CAACjB,KAAL,EAAY;AACVgB,MAAAA,QAAQ,CAAC;AAAEhB,QAAAA,KAAK,EAAE,KAAT;AAAgBC,QAAAA,YAAY,EAAE;AAA9B,OAAD,CAAR;AACAC,MAAAA,gBAAgB,CAACW,MAAM,CAACV,GAAR,EAAa;AAC3BC,QAAAA,IAAI,EAAES,MAAM,CAACT,IADc;AAE3BC,QAAAA,OAAO,EAAEQ,MAAM,CAACR,OAFW;AAG3BC,QAAAA,MAAM,EAAEO,MAAM,CAACP;AAHY,OAAb,CAAhB,CAKGY,IALH,CAKSC,KAAD,IAAW;AACf,SAACF,SAAD,IAAcD,QAAQ,CAACG,KAAD,CAAtB;AACD,OAPH,EAQGC,KARH,CAQS,MAAM;AACX,SAACH,SAAD,IAAcD,QAAQ,CAACjB,WAAD,CAAtB;AACD,OAVH;AAWD;;AACD,WAAO,MAAM;AACXkB,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAnBD,EAmBG,CAACjB,KAAD,EAAQa,MAAM,CAACV,GAAf,EAAoBU,MAAM,CAACT,IAA3B,EAAiCS,MAAM,CAACR,OAAxC,EAAiDQ,MAAM,CAACP,MAAxD,CAnBH;AAoBA,wBAAU,MAAM;AACdS,IAAAA,SAAS,CAACd,YAAV,KAA0Ba,YAA1B,aAA0BA,YAA1B,uBAA0BA,YAAY,CAAEO,IAAd,CAAmB,IAAnB,EAAyBN,SAAS,CAACd,YAAnC,CAA1B;AACD,GAFD,EAEG,CAACc,SAAS,CAACd,YAAX,EAAyBa,YAAzB,CAFH;AAGA,SAAOC,SAAP;AACD;;AAEc,SAASO,eAAT,CAAyBC,KAAzB,EAAsD;AACnE,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MACJ,uBAAWC,4BAAX,CADF;AAEA,QAAM;AAAEzB,IAAAA,YAAF;AAAgBD,IAAAA;AAAhB,MAA0BY,kBAAkB,CAACW,KAAD,CAAlD;;AACA,MAAIvB,KAAJ,EAAW;AACT,WAAOwB,eAAe,CAACH,IAAhB,CAAqB,IAArB,EAA2BE,KAAK,CAACV,MAAjC,CAAP;AACD;;AACD,MAAIZ,YAAY,KAAK,IAArB,EAA2B;AACzB,WAAOwB,iBAAiB,CAACJ,IAAlB,CAAuB,IAAvB,EAA6BE,KAAK,CAACV,MAAnC,CAAP;AACD;;AACD,sBAAOc,eAAMC,aAAN,CAAoBC,oBAApB,EAAiC;AACtCC,IAAAA,QAAQ,EAAE7B,YAD4B;AAEtC8B,IAAAA,OAAO,EAAER,KAAK,CAACV,MAAN,CAAaV;AAFgB,GAAjC,CAAP;AAID","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { HTMLSourceUri } from './shared-types';\nimport { SourceLoaderProps } from './internal-types';\nimport RenderTTree from './RenderTTree';\nimport sourceLoaderContext from './context/sourceLoaderContext';\n\ninterface LoaderInternalState {\n  error: boolean;\n  resolvedHTML: string | null;\n}\n\nconst ERROR_STATE = {\n  error: true,\n  resolvedHTML: null\n};\n\nasync function loadHTMLResource(\n  uri: string,\n  { body, headers, method }: Omit<HTMLSourceUri, 'uri'>\n): Promise<LoaderInternalState> {\n  const response = await fetch(uri, {\n    body,\n    headers,\n    method\n  });\n  if (response.ok) {\n    const html = await response.text();\n    return {\n      resolvedHTML: html,\n      error: false\n    };\n  }\n  return ERROR_STATE;\n}\n\nexport type UriSourceLoaderProps = {\n  source: HTMLSourceUri;\n} & SourceLoaderProps;\n\nfunction useUriSourceLoader({ source, onHTMLLoaded }: UriSourceLoaderProps) {\n  const [loadState, setState] = useState<LoaderInternalState>({\n    error: false,\n    resolvedHTML: null\n  });\n  const { error } = loadState;\n\n  // Effect to reload on uri changes\n  useEffect(() => {\n    let cancelled = false;\n    if (!error) {\n      setState({ error: false, resolvedHTML: null });\n      loadHTMLResource(source.uri, {\n        body: source.body,\n        headers: source.headers,\n        method: source.method\n      })\n        .then((state) => {\n          !cancelled && setState(state);\n        })\n        .catch(() => {\n          !cancelled && setState(ERROR_STATE);\n        });\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [error, source.uri, source.body, source.headers, source.method]);\n  useEffect(() => {\n    loadState.resolvedHTML && onHTMLLoaded?.call(null, loadState.resolvedHTML);\n  }, [loadState.resolvedHTML, onHTMLLoaded]);\n  return loadState;\n}\n\nexport default function SourceLoaderUri(props: UriSourceLoaderProps) {\n  const { remoteErrorView, remoteLoadingView } =\n    useContext(sourceLoaderContext);\n  const { resolvedHTML, error } = useUriSourceLoader(props);\n  if (error) {\n    return remoteErrorView.call(null, props.source);\n  }\n  if (resolvedHTML === null) {\n    return remoteLoadingView.call(null, props.source);\n  }\n  return React.createElement(RenderTTree, {\n    document: resolvedHTML!,\n    baseUrl: props.source.uri\n  });\n}\n"]}