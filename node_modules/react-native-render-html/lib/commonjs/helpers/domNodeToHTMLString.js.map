{"version":3,"sources":["domNodeToHTMLString.ts"],"names":["renderOpeningTag","tag","attributes","strAttributes","Object","keys","forEach","key","push","length","join","domNodeToHTMLString","root","reporter","depth","html","strChildren","children","reduce","prev","curr","convertedNode","tagName","attribs","text","data"],"mappings":";;;;;;;AAAA;;AACA;;;;AAMA,SAASA,gBAAT,CAA0BC,GAA1B,EAAuCC,UAAvC,EAA2E;AACzE,QAAMC,aAAuB,GAAG,EAAhC;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBI,OAAxB,CAAiCC,GAAD,IAAS;AACvCJ,IAAAA,aAAa,CAACK,IAAd,CAAoB,GAAED,GAAI,KAAI,gCAAkB,GAAEL,UAAU,CAACK,GAAD,CAAM,EAApC,CAAuC,GAArE;AACD,GAFD;AAGA,SAAQ,IAAGN,GAAI,GAAEE,aAAa,CAACM,MAAd,GAAuB,GAAvB,GAA6B,EAAG,GAAEN,aAAa,CAACO,IAAd,CAAmB,GAAnB,CAAwB,GAA3E;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASC,mBAAT,CACbC,IADa,EAEbC,QAFa,EAGbC,KAAK,GAAG,CAHK,EAIb;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAI,yCAAaH,IAAb,CAAJ,EAAwB;AACtB,UAAMI,WAAW,GAAGJ,IAAI,CAACK,QAAL,CAAcC,MAAd,CAAqB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACvD,YAAMC,aAAa,GAAGV,mBAAmB,CAACS,IAAD,EAAOP,QAAP,EAAiBC,KAAK,GAAG,CAAzB,CAAzC;AACA,aAAQ,GAAEK,IAAK,GAAEE,aAAc,EAA/B;AACD,KAHmB,EAGjB,EAHiB,CAApB;AAIAN,IAAAA,IAAI,GAAI,GAAEf,gBAAgB,CAACY,IAAI,CAACU,OAAN,EAAeV,IAAI,CAACW,OAApB,CAA6B,GAAEP,WAAY,KACnEJ,IAAI,CAACU,OACN,GAFD;AAGD,GARD,MAQO,IAAI,sCAAUV,IAAV,CAAJ,EAAqB;AAC1B,UAAMY,IAAI,GAAG,gCAAiBZ,IAAI,CAACa,IAAtB,CAAb;AACAV,IAAAA,IAAI,GAAGS,IAAP;AACD;;AACD,SAAOX,QAAP,KAAoB,UAApB,IAAkCA,QAAQ,CAACD,IAAD,EAAOE,KAAP,EAAcC,IAAd,CAA1C;AACA,SAAOA,IAAP;AACD;AAED;AACA;AACA","sourcesContent":["import strigifyEntities from 'stringify-entities';\nimport {\n  Node,\n  isDomText,\n  isDomElement\n} from '@native-html/transient-render-engine';\n\nfunction renderOpeningTag(tag: string, attributes: Record<string, string>) {\n  const strAttributes: string[] = [];\n  Object.keys(attributes).forEach((key) => {\n    strAttributes.push(`${key}=\"${strigifyEntities(`${attributes[key]}`)}\"`);\n  });\n  return `<${tag}${strAttributes.length ? ' ' : ''}${strAttributes.join(' ')}>`;\n}\n\n/**\n * Convert a DOM node to its HTML representation.\n *\n * @param root - The root to stringify.\n * @param reporter - An optional function which will receive every\n * parsed node as 1st argument, the depth as 2d argument and the converted html\n * as 3d argument.\n */\nexport default function domNodeToHTMLString(\n  root: Node | null,\n  reporter?: DomNodeToHtmlReporter,\n  depth = 0\n) {\n  let html = '';\n  if (isDomElement(root)) {\n    const strChildren = root.children.reduce((prev, curr) => {\n      const convertedNode = domNodeToHTMLString(curr, reporter, depth + 1);\n      return `${prev}${convertedNode}`;\n    }, '');\n    html = `${renderOpeningTag(root.tagName, root.attribs)}${strChildren}</${\n      root.tagName\n    }>`;\n  } else if (isDomText(root)) {\n    const text = strigifyEntities(root.data);\n    html = text;\n  }\n  typeof reporter === 'function' && reporter(root, depth, html);\n  return html;\n}\n\n/**\n * @public\n */\nexport interface DomNodeToHtmlReporter {\n  /**\n   * @param node - The node being parsed.\n   * @param depth - How many parents this node have.\n   * @param html - The HTML representation of this node and its children.\n   */\n  (node: Node | null, depth: number, html: string): void;\n}\n"]}