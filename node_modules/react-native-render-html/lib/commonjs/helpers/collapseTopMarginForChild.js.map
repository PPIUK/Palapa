{"version":3,"sources":["collapseTopMarginForChild.ts"],"names":["isCollapsible","tnode","type","collapseTopMarginForChild","n","tchildren","childTnode"],"mappings":";;;;;;;AACA;;;;AAEA,SAASA,aAAT,CAAuBC,KAAvB,EAAqC;AACnC,SAAOA,KAAK,CAACC,IAAN,KAAe,OAAf,IAA0BD,KAAK,CAACC,IAAN,KAAe,UAAhD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASC,yBAAT,CACbC,CADa,EAEbC,SAFa,EAGE;AACf,QAAMC,UAAU,GAAGD,SAAS,CAACD,CAAD,CAA5B;;AACA,MAAIJ,aAAa,CAACM,UAAD,CAAb,IAA6BF,CAAC,GAAG,CAAjC,IAAsCJ,aAAa,CAACK,SAAS,CAACD,CAAC,GAAG,CAAL,CAAV,CAAvD,EAA2E;AACzE,WAAO,oCAAsBC,SAAS,CAACD,CAAC,GAAG,CAAL,CAA/B,EAAwCE,UAAxC,CAAP;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import { TNode } from '@native-html/transient-render-engine';\nimport getCollapsedMarginTop from './getCollapsedMarginTop';\n\nfunction isCollapsible(tnode: TNode) {\n  return tnode.type === 'block' || tnode.type === 'phrasing';\n}\n\n/**\n * Compute top collapsed margin for the nth {@link TNode}-child of a list of\n * TNodes.\n *\n * @param n - The index for which the top margin should be collapsed.\n * @param tchildren - The list of {@link TNode} children.\n * @returns `null` when no margin collapsing should apply, a number otherwise.\n * @public\n */\nexport default function collapseTopMarginForChild(\n  n: number,\n  tchildren: readonly TNode[]\n): number | null {\n  const childTnode = tchildren[n];\n  if (isCollapsible(childTnode) && n > 0 && isCollapsible(tchildren[n - 1])) {\n    return getCollapsedMarginTop(tchildren[n - 1], childTnode);\n  }\n  return null;\n}\n"]}