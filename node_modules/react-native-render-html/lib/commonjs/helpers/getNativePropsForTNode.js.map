{"version":3,"sources":["getNativePropsForTNode.ts"],"names":["empty","getNativePropsForTNode","props","tnode","style","type","nativeProps","passedNativeProps","onPress","children","overridenChildren","propsForChildren","viewProps","textProps","TNodeChildrenRenderer","data","React","createElement","switchProp","propsFromModel","getReactNativeProps","syntheticOnPress","accessibilityRole","testID","tagName","undefined"],"mappings":";;;;;;;AACA;;;;AAIA,MAAMA,KAAU,GAAG,EAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,SAASC,sBAAT,CAGbC,KAHa,EAIwD;AAAA;;AACrE,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,WAAW,EAAEC,iBAJT;AAKJC,IAAAA,OALI;AAMJC,IAAAA,QAAQ,EAAEC,iBANN;AAOJC,IAAAA,gBAPI;AAQJC,IAAAA,SARI;AASJC,IAAAA,SATI;AAUJC,IAAAA;AAVI,MAWFZ,KAXJ;AAYA,QAAMO,QAAQ,GACZC,iBAAiB,KAChBP,KAAK,CAACE,IAAN,KAAe,MAAf,GACIF,KAAD,CAAiBY,IADpB,gBAEGC,eAAMC,aAAN,CAAoBH,qBAApB,EAA2C;AACzCX,IAAAA,KADyC;AAEzCQ,IAAAA;AAFyC,GAA3C,CAHa,CADnB;AAQA,QAAMO,UAAU,GAAGb,IAAI,KAAK,OAAT,GAAmBO,SAAnB,GAA+BC,SAAlD;AACA,QAAMM,cAAc,GAClB,0BAAAhB,KAAK,CAACiB,mBAAN,kFAA8Bf,IAAI,KAAK,OAAT,GAAmB,MAAnB,GAA4B,MAA1D,MAAqEL,KADvE;AAEA,QAAMqB,gBAAgB,WACpBb,OADoB,aACpBA,OADoB,cACpBA,OADoB,GACTD,iBADS,aACTA,iBADS,uBACTA,iBAAiB,CAAEC,OADV,uCACqBW,cAAc,CAACX,OAD1D;AAEA,QAAMF,WAAkC,GAAG,EACzC,IAAI,OAAOe,gBAAP,KAA4B,UAA5B,GACC;AAAEC,MAAAA,iBAAiB,EAAEjB,IAAI,KAAK,OAAT,GAAmB,QAAnB,GAA8B;AAAnD,KADD,GAEA,IAFJ,CADyC;AAIzC,OAAGc,cAJsC;AAKzC,OAAGZ,iBALsC;AAMzC,OAAGW,UANsC;AAOzCT,IAAAA,QAPyC;AAQzCD,IAAAA,OAAO,EAAEa,gBARgC;AASzCjB,IAAAA,KAAK,EAAE,CAACA,KAAD,EAAQG,iBAAR,aAAQA,iBAAR,uBAAQA,iBAAiB,CAAEH,KAA3B,EAAkCc,UAAU,CAACd,KAA7C,CATkC;AAUzCmB,IAAAA,MAAM,EAAEpB,KAAK,CAACqB,OAAN,IAAiBC;AAVgB,GAA3C;AAYA,SAAOnB,WAAP;AACD","sourcesContent":["import { TBlock, TPhrasing, TText } from '@native-html/transient-render-engine';\nimport React from 'react';\nimport { TextProps, ViewProps } from 'react-native';\nimport { TDefaultRendererProps } from '../shared-types';\n\nconst empty: any = {};\n\n/**\n * Extract React Native props for a given {@link TNode}, such as those which\n * would be passed to `Text`, `View` or `GenericPressable` by `TDefaultRenderer`.\n *\n * This helper function is peculiarly useful when one wants a custom renderer\n * which uses a different native component, for example `Animated.Text` instead\n * of default `Text`.\n *\n * @public\n *\n * @example\n *\n * ```tsx\n * import React from 'react';\n * import { Animated } from 'react-native';\n * import { CustomTextualRenderer, getNativePropsForTNode } from 'react-native-render-html';\n *\n * const AnimatedSpanRenderer: CustomTextualRenderer = (props) => {\n *   const nativeProps = getNativePropsForTNode(props);\n *   // This is equivalent to a TDefaultRenderer which `Text` is replaced\n *   // with Animated.Text\n *   return <Animated.Text {...nativeProps} />;\n * }\n * ```\n */\nexport default function getNativePropsForTNode<\n  T extends TPhrasing | TText | TBlock\n>(\n  props: TDefaultRendererProps<T>\n): T extends TBlock ? ViewProps & { onPress?: () => void } : TextProps {\n  const {\n    tnode,\n    style,\n    type,\n    nativeProps: passedNativeProps,\n    onPress,\n    children: overridenChildren,\n    propsForChildren,\n    viewProps,\n    textProps,\n    TNodeChildrenRenderer\n  } = props;\n  const children =\n    overridenChildren ||\n    (tnode.type === 'text'\n      ? (tnode as TText).data\n      : React.createElement(TNodeChildrenRenderer, {\n          tnode,\n          propsForChildren\n        }));\n  const switchProp = type === 'block' ? viewProps : textProps;\n  const propsFromModel =\n    tnode.getReactNativeProps()?.[type === 'block' ? 'view' : 'text'] || empty;\n  const syntheticOnPress =\n    onPress ?? passedNativeProps?.onPress ?? propsFromModel.onPress;\n  const nativeProps: TextProps | ViewProps = {\n    ...(typeof syntheticOnPress === 'function'\n      ? ({ accessibilityRole: type === 'block' ? 'button' : 'link' } as const)\n      : null),\n    ...propsFromModel,\n    ...passedNativeProps,\n    ...switchProp,\n    children,\n    onPress: syntheticOnPress,\n    style: [style, passedNativeProps?.style, switchProp.style],\n    testID: tnode.tagName || undefined\n  };\n  return nativeProps as any;\n}\n"]}