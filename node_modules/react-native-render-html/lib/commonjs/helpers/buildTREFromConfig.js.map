{"version":3,"sources":["buildTREFromConfig.ts"],"names":["buildTREFromConfig","props","allowedStyles","ignoredStyles","ignoredDomTags","ignoreDomNode","domVisitors","htmlParserOptions","baseStyle","classesStyles","tagsStyles","idsStyles","enableCSSInlineProcessing","enableUserAgentStyles","systemFonts","fallbackFonts","customHTMLElementModels","emSize","setMarkersForTNode","selectDomRoot","dangerouslyDisableHoisting","dangerouslyDisableWhitespaceCollapsing","customizeHTMLModels","Object","keys","length","defaultModels","undefined","fontMap","forEach","font","isFontSupported","fontFamily","TRenderEngine","cssProcessorConfig","inlinePropertiesBlacklist","inlinePropertiesWhitelist","rootFontSize","decodeEntities","stylesConfig"],"mappings":";;;;;;;AACA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,kBAAT,CAA4BC,KAA5B,EAAwD;AACrE,QAAM;AACJC,IAAAA,aADI;AAEJ;AACAC,IAAAA,aAAa,GAAG,EAHZ;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,iBAPI;AAQJC,IAAAA,SARI;AASJC,IAAAA,aATI;AAUJC,IAAAA,UAVI;AAWJC,IAAAA,SAXI;AAYJC,IAAAA,yBAZI;AAaJC,IAAAA,qBAbI;AAcJC,IAAAA,WAAW,GAAG,EAdV;AAeJC,IAAAA,aAAa,GAAG,EAfZ;AAgBJC,IAAAA,uBAAuB,GAAG,EAhBtB;AAiBJC,IAAAA,MAjBI;AAkBJC,IAAAA,kBAlBI;AAmBJC,IAAAA,aAnBI;AAoBJC,IAAAA,0BApBI;AAqBJC,IAAAA;AArBI,MAsBFpB,KAtBJ;AAuBA,QAAMqB,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYR,uBAAZ,EAAqCS,MAArC,GACvBC,aAAD,IAAuE;AACrE,WAAO,EAAE,GAAGA,aAAL;AAAoB,SAAGV;AAAvB,KAAP;AACD,GAHuB,GAIxBW,SAJJ;AAKA,QAAMC,OAAO,GAAG,EAAhB;AACAd,EAAAA,WAAW,CAACe,OAAZ,CAAqBC,IAAD,IAAU;AAC5BF,IAAAA,OAAO,CAACE,IAAD,CAAP,GAAgB,IAAhB;AACD,GAFD;;AAGA,QAAMC,eAAe,GAAIC,UAAD,IAAwB;AAC9C,QAAIjB,aAAa,CAACiB,UAAD,CAAjB,EAA6D;AAC3D,aAAOjB,aAAa,CAACiB,UAAD,CAApB;AACD;AACD;;;AACA,WAAOJ,OAAO,CAACI,UAAD,CAAP,IAAuB,KAA9B;AACD,GAND;;AAOA,SAAO,IAAIC,8BAAJ,CAAkB;AACvBX,IAAAA,mBADuB;AAEvBY,IAAAA,kBAAkB,EAAE;AAClBH,MAAAA,eADkB;AAElBI,MAAAA,yBAAyB,EAAEhC,aAFT;AAGlBiC,MAAAA,yBAAyB,EAAElC,aAHT;AAIlBmC,MAAAA,YAAY,EAAEpB;AAJI,KAFG;AAQvBV,IAAAA,iBAAiB,EAAE;AACjB+B,MAAAA,cAAc,EAAE,IADC;AAEjB,SAAG/B;AAFc,KARI;AAYvBgC,IAAAA,YAAY,EAAE;AACZ/B,MAAAA,SADY;AAEZI,MAAAA,yBAFY;AAGZC,MAAAA,qBAHY;AAIZJ,MAAAA,aAJY;AAKZE,MAAAA,SALY;AAMZD,MAAAA;AANY,KAZS;AAoBvBN,IAAAA,cApBuB;AAqBvBC,IAAAA,aArBuB;AAsBvBC,IAAAA,WAtBuB;AAuBvBY,IAAAA,kBAvBuB;AAwBvBC,IAAAA,aAxBuB;AAyBvBC,IAAAA,0BAzBuB;AA0BvBC,IAAAA;AA1BuB,GAAlB,CAAP;AA4BD","sourcesContent":["import { TRenderEngineConfig } from '../shared-types';\nimport TRenderEngine, {\n  HTMLModelRecord,\n  TagName\n} from '@native-html/transient-render-engine';\n\n/**\n * Build a {@link TRenderEngine} instance from a configuration object.\n *\n * @remarks This utility can be useful to test and debug the TRE layer of your\n * application.\n *\n * @param props - The configuration from which a TRE should be built.\n */\nexport default function buildTREFromConfig(props: TRenderEngineConfig) {\n  const {\n    allowedStyles,\n    // TODO fix upstream\n    ignoredStyles = [],\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    htmlParserOptions,\n    baseStyle,\n    classesStyles,\n    tagsStyles,\n    idsStyles,\n    enableCSSInlineProcessing,\n    enableUserAgentStyles,\n    systemFonts = [],\n    fallbackFonts = {},\n    customHTMLElementModels = {},\n    emSize,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  } = props;\n  const customizeHTMLModels = Object.keys(customHTMLElementModels).length\n    ? (defaultModels: HTMLModelRecord<TagName>): HTMLModelRecord<TagName> => {\n        return { ...defaultModels, ...customHTMLElementModels };\n      }\n    : undefined;\n  const fontMap = {} as Record<string, true>;\n  systemFonts.forEach((font) => {\n    fontMap[font] = true;\n  });\n  const isFontSupported = (fontFamily: string) => {\n    if (fallbackFonts[fontFamily as keyof typeof fallbackFonts]) {\n      return fallbackFonts[fontFamily as keyof typeof fallbackFonts];\n    }\n    /* istanbul ignore next */\n    return fontMap[fontFamily] || false;\n  };\n  return new TRenderEngine({\n    customizeHTMLModels,\n    cssProcessorConfig: {\n      isFontSupported,\n      inlinePropertiesBlacklist: ignoredStyles,\n      inlinePropertiesWhitelist: allowedStyles,\n      rootFontSize: emSize\n    },\n    htmlParserOptions: {\n      decodeEntities: true,\n      ...htmlParserOptions\n    },\n    stylesConfig: {\n      baseStyle,\n      enableCSSInlineProcessing,\n      enableUserAgentStyles,\n      classesStyles,\n      idsStyles,\n      tagsStyles\n    },\n    ignoredDomTags,\n    ignoreDomNode,\n    domVisitors,\n    setMarkersForTNode,\n    selectDomRoot,\n    dangerouslyDisableHoisting,\n    dangerouslyDisableWhitespaceCollapsing\n  });\n}\n"]}