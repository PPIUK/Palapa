{"version":3,"sources":["RenderHTMLSource.tsx"],"names":["renderSourcePropTypes","source","PropTypes","oneOfType","shape","html","string","isRequired","baseUrl","dom","object","uri","method","body","any","headers","onTTreeChange","func","onHTMLLoaded","onDocumentMetadataLoaded","contentWidth","number","isEmptySource","RawSourceLoader","props","__DEV__","console","warn","debugMessage","noSource","React","createElement","SourceLoaderUri","SourceLoaderDom","SourceLoaderInline","shallowEqual","prop1","prop2","Object","keys","key","RenderHTMLSource","RenderHtmlSource","profile","prop","ttreeEvents","Dimensions","get","width","prevSource","prev","currSource","curr","propTypes"],"mappings":"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","sourcesContent":["import equals from 'ramda/src/equals';\nimport React, { memo, ReactElement, useMemo } from 'react';\nimport { Dimensions } from 'react-native';\nimport PropTypes from 'prop-types';\nimport ttreeEventsContext from './context/ttreeEventsContext';\nimport isUriSource from './helpers/isUriSource';\nimport { SourceLoaderProps, TTreeEvents } from './internal-types';\nimport {\n  HTMLSourceDom,\n  HTMLSourceInline,\n  RenderHTMLSourceProps,\n  HTMLSourceUri,\n  HTMLSource\n} from './shared-types';\nimport SourceLoaderUri from './SourceLoaderUri';\nimport SourceLoaderInline from './SourceLoaderInline';\nimport SourceLoaderDom from './SourceLoaderDom';\nimport debugMessage from './debugMessages';\nimport contentWidthContext from './context/contentWidthContext';\nimport isDomSource from './helpers/isDomSource';\nimport useProfiler from './hooks/useProfiler';\n\nexport type RenderHTMLSourcePropTypes = Record<\n  keyof RenderHTMLSourceProps,\n  any\n>;\n\nexport const renderSourcePropTypes: RenderHTMLSourcePropTypes = {\n  source: PropTypes.oneOfType([\n    PropTypes.shape({\n      html: PropTypes.string.isRequired,\n      baseUrl: PropTypes.string\n    }),\n    PropTypes.shape({\n      dom: PropTypes.object.isRequired,\n      baseUrl: PropTypes.string\n    }),\n    PropTypes.shape({\n      uri: PropTypes.string.isRequired,\n      method: PropTypes.string,\n      body: PropTypes.any,\n      headers: PropTypes.object\n    })\n  ]),\n  onTTreeChange: PropTypes.func,\n  onHTMLLoaded: PropTypes.func,\n  onDocumentMetadataLoaded: PropTypes.func,\n  contentWidth: PropTypes.number\n};\n\nfunction isEmptySource(source: undefined | HTMLSource) {\n  return (\n    !source ||\n    (typeof (source as HTMLSourceUri).uri !== 'string' &&\n      typeof (source as HTMLSourceInline).html !== 'string' &&\n      !(source as HTMLSourceDom).dom)\n  );\n}\n\nfunction RawSourceLoader({\n  source,\n  ...props\n}: SourceLoaderProps): ReactElement | null {\n  if (isEmptySource(source)) {\n    /* istanbul ignore next */\n    if (typeof __DEV__ === 'boolean' && __DEV__) {\n      console.warn(debugMessage.noSource);\n    }\n    return null;\n  }\n  if (isUriSource(source)) {\n    return React.createElement(SourceLoaderUri, { source, ...props });\n  }\n  if (isDomSource(source)) {\n    return React.createElement(SourceLoaderDom, { source, ...props });\n  }\n  return React.createElement(SourceLoaderInline, { source, ...props });\n}\n\n// check if for each key of two objects, the values are equal\nfunction shallowEqual(prop1: any, prop2: any) {\n  if (!equals(Object.keys(prop1), Object.keys(prop2))) {\n    return false;\n  }\n  for (const key in prop1) {\n    if (prop1[key] !== prop2[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * A React component to render HTML snippets.\n *\n * @remarks This component is useful when you have to load dozens of HTML\n * snippets with the same config. Performance is expected to improve in such\n * scenarios.\n *\n * @warning This component requires to have {@link TRenderEngineProvider}\n * and {@link RenderHTMLConfigProvider} as parents.\n */\nconst RenderHTMLSource = memo(\n  function RenderHtmlSource({\n    onDocumentMetadataLoaded,\n    onTTreeChange,\n    contentWidth,\n    ...props\n  }: RenderHTMLSourceProps) {\n    const profile = useProfiler({\n      prop: 'onDocumentMetadataLoaded or onTTreeChange'\n    });\n    const ttreeEvents: TTreeEvents = useMemo(() => {\n      typeof __DEV__ === 'boolean' && __DEV__ && profile();\n      return {\n        onDocumentMetadataLoaded,\n        onTTreeChange\n      };\n    }, [onDocumentMetadataLoaded, onTTreeChange, profile]);\n    if (typeof __DEV__ === 'boolean' && __DEV__) {\n      if (!(typeof contentWidth === 'number')) {\n        console.warn(debugMessage.contentWidth);\n      }\n    }\n    return (\n      <ttreeEventsContext.Provider value={ttreeEvents}>\n        <contentWidthContext.Provider\n          value={contentWidth || Dimensions.get('window').width}>\n          {React.createElement(RawSourceLoader, props)}\n        </contentWidthContext.Provider>\n      </ttreeEventsContext.Provider>\n    );\n  },\n  ({ source: prevSource, ...prev }, { source: currSource, ...curr }) => {\n    return shallowEqual(prevSource, currSource) && shallowEqual(prev, curr);\n  }\n);\n\n/**\n * @ignore\n */\n(RenderHTMLSource as any).propTypes = renderSourcePropTypes;\n\nexport default RenderHTMLSource;\n"]}