{"version":3,"sources":["useInternalRenderer.ts"],"names":["specialRenderersConfig","img","hook","useIMGElementProps","Element","IMGElement","ol","useOLElementProps","OLElement","ul","useULElementProps","ULElement","a","useAElementProps","undefined","hasSpecialInternalRenderer","tagName","useInternalRenderer","props","TDefaultRenderer","rendererProps","Renderer"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAGA,MAAMA,sBAAsB,GAAG;AAC7BC,EAAAA,GAAG,EAAE;AACHC,IAAAA,IAAI,EAAEC,+BADH;AAEHC,IAAAA,OAAO,EAAEC;AAFN,GADwB;AAK7BC,EAAAA,EAAE,EAAE;AACFJ,IAAAA,IAAI,EAAEK,6BADJ;AAEFH,IAAAA,OAAO,EAAEI;AAFP,GALyB;AAS7BC,EAAAA,EAAE,EAAE;AACFP,IAAAA,IAAI,EAAEQ,6BADJ;AAEFN,IAAAA,OAAO,EAAEO;AAFP,GATyB;AAa7BC,EAAAA,CAAC,EAAE;AACDV,IAAAA,IAAI,EAAEW,2BADL;AAEDT,IAAAA,OAAO,EAAEU;AAFR;AAb0B,CAA/B;;AAqBA,SAASC,0BAAT,CACEC,OADF,EAEkD;AAChD,SAAOA,OAAO,IAAIhB,sBAAlB;AACD;;AAMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASiB,mBAAT,CACbD,OADa,EAEbE,KAFa,EAKwC;AACrD,QAAM;AAAEC,IAAAA,gBAAF;AAAoB,OAAGC;AAAvB,MAAyCF,KAA/C;;AACA,MAAIH,0BAA0B,CAACC,OAAD,CAA9B,EAAyC;AACvC,WAAO;AACLK,MAAAA,QAAQ,EAAErB,sBAAsB,CAACgB,OAAD,CAAtB,CAAgCZ,OAAhC,IAA2Ce,gBADhD;AAELC,MAAAA,aAAa,EAAEpB,sBAAsB,CAACgB,OAAD,CAAtB,CAAgCd,IAAhC,CAAqCgB,KAArC;AAFV,KAAP;AAID;;AACD,SAAO;AACLG,IAAAA,QAAQ,EAAEF,gBADL;AAELC,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { TagName } from '@native-html/transient-render-engine';\nimport { ComponentType } from 'react';\nimport IMGElement from '../elements/IMGElement';\nimport OLElement from '../elements/OLElement';\nimport ULElement from '../elements/ULElement';\nimport { useAElementProps } from '../renderers/ARenderer';\nimport { useIMGElementProps } from '../renderers/IMGRenderer';\nimport { useOLElementProps } from '../renderers/OLRenderer';\nimport { useULElementProps } from '../renderers/ULRenderer';\nimport { InternalRendererProps, TDefaultRendererProps } from '../shared-types';\n\nconst specialRenderersConfig = {\n  img: {\n    hook: useIMGElementProps,\n    Element: IMGElement\n  },\n  ol: {\n    hook: useOLElementProps,\n    Element: OLElement\n  },\n  ul: {\n    hook: useULElementProps,\n    Element: ULElement\n  },\n  a: {\n    hook: useAElementProps,\n    Element: undefined\n  }\n};\n\nexport type InternalSpecialRenderedTag = keyof typeof specialRenderersConfig;\n\nfunction hasSpecialInternalRenderer(\n  tagName: TagName\n): tagName is keyof typeof specialRenderersConfig {\n  return tagName in specialRenderersConfig;\n}\n\nexport interface InternalRendererConfig<P> {\n  Renderer: ComponentType<P>;\n  rendererProps: P;\n}\n/**\n * Resuse internal renderers logic for infinite customization!\n *\n * @remarks `tagName` must be invariant, i.e. it cannot change. You would\n * otherwise break the rules of hooks.\n *\n * @param tagName - **Invariant** The tag name to extend.\n * @param props - The props passed to the custom renderer.\n * @typeParam T - The name of the tag to target.\n * @returns An object with two fields: `Renderer` (the internal react\n * component) and `rendererProps`, the internal component props.\n *\n * @public\n */\nexport default function useInternalRenderer<T extends TagName>(\n  tagName: T,\n  props: InternalRendererProps<any>\n): T extends InternalSpecialRenderedTag\n  ? InternalRendererConfig<ReturnType<typeof specialRenderersConfig[T]['hook']>>\n  : InternalRendererConfig<TDefaultRendererProps<any>> {\n  const { TDefaultRenderer, ...rendererProps } = props;\n  if (hasSpecialInternalRenderer(tagName)) {\n    return {\n      Renderer: specialRenderersConfig[tagName].Element || TDefaultRenderer,\n      rendererProps: specialRenderersConfig[tagName].hook(props as any)\n    } as any;\n  }\n  return {\n    Renderer: TDefaultRenderer,\n    rendererProps\n  } as any;\n}\n"]}