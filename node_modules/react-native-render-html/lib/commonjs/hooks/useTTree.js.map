{"version":3,"sources":["useTTree.ts"],"names":["useTTreeChangeEffect","ttree","onTTreeChange","ttreeEventsContext","debug","updateNumber","call","__DEV__","console","info","current","snapshot","withNodeIndex","withStyles","useTTree","props","document","trenderEngine","buildTTree","buildTTreeFromDoc"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AAGA,SAASA,oBAAT,CAA8BC,KAA9B,EAAgD;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAoB,uBAAWC,2BAAX,CAA1B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAY,0CAAlB;AACA,QAAMC,YAAY,GAAG,mBAAO,CAAP,CAArB;AACA,wBAAU,MAAM;AACdH,IAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEI,IAAf,CAAoB,IAApB,EAA0BL,KAA1B;;AACA,QAAIG,KAAK,IAAI,OAAOG,OAAP,KAAmB,SAA5B,IAAyCA,OAA7C,EAAsD;AACpDC,MAAAA,OAAO,CAACC,IAAR,CACG,gCAA+B,EAAEJ,YAAY,CAACK,OAAQ,MAAKT,KAAK,CAACU,QAAN,CAC1D;AACEC,QAAAA,aAAa,EAAE,KADjB;AAEEC,QAAAA,UAAU,EAAE;AAFd,OAD0D,CAK1D,EANJ;AAQD;AACF,GAZD,EAYG,CAACZ,KAAD,EAAQC,aAAR,EAAuBE,KAAvB,CAZH;AAaD;AAED;AACA;AACA;;;AACe,SAASU,QAAT,CAAkBC,KAAlB,EAA2C;AACxD,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAME,aAAa,GAAG,qDAAtB;AACA,QAAMhB,KAAK,GAAG,oBACZ,MACE,OAAOe,QAAP,KAAoB,QAApB,GACIC,aAAa,CAACC,UAAd,CAAyBF,QAAzB,CADJ,GAEIC,aAAa,CAACE,iBAAd,CAAgCH,QAAhC,CAJM,EAKZ,CAACA,QAAD,EAAWC,aAAX,CALY,CAAd;AAOAjB,EAAAA,oBAAoB,CAACC,KAAD,CAApB;AACA,SAAOA,KAAP;AACD","sourcesContent":["import { useMemo, useEffect, useRef, useContext } from 'react';\nimport ttreeEventsContext from '../context/ttreeEventsContext';\nimport { useSharedProps } from '../context/SharedPropsProvider';\nimport { RenderTTreeProps } from '../internal-types';\nimport { useAmbientTRenderEngine } from '../TRenderEngineProvider';\nimport { TDocument } from '@native-html/transient-render-engine';\n\nfunction useTTreeChangeEffect(ttree: TDocument) {\n  const { onTTreeChange } = useContext(ttreeEventsContext);\n  const { debug } = useSharedProps();\n  const updateNumber = useRef(0);\n  useEffect(() => {\n    onTTreeChange?.call(null, ttree);\n    if (debug && typeof __DEV__ === 'boolean' && __DEV__) {\n      console.info(\n        `Transient Render Tree update ${++updateNumber.current}:\\n${ttree.snapshot(\n          {\n            withNodeIndex: false,\n            withStyles: false\n          }\n        )}`\n      );\n    }\n  }, [ttree, onTTreeChange, debug]);\n}\n\n/**\n * @internal\n */\nexport default function useTTree(props: RenderTTreeProps) {\n  const { document } = props;\n  const trenderEngine = useAmbientTRenderEngine();\n  const ttree = useMemo(\n    () =>\n      typeof document === 'string'\n        ? trenderEngine.buildTTree(document)\n        : trenderEngine.buildTTreeFromDoc(document),\n    [document, trenderEngine]\n  );\n  useTTreeChangeEffect(ttree);\n  return ttree;\n}\n"]}