{"version":3,"sources":["useVisibleRanges.tsx"],"names":["useDerivedValue","useVisibleRanges","options","total","viewSize","translation","windowSize","_windowSize","ranges","positiveCount","Math","round","negativeCount","curIndex","value","negativeRange","positiveRange"],"mappings":"AACA,SAASA,eAAT,QAAgC,yBAAhC;AAOA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAKY;AACf,QAAM;AACFC,IAAAA,KAAK,GAAG,CADN;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,UAAU,EAAEC,WAAW,GAAG;AAJxB,MAKFL,OALJ;AAOA,QAAMI,UAAU,GAAGH,KAAK,IAAII,WAAT,GAAuBJ,KAAvB,GAA+BI,WAAlD;AAEA,QAAMC,MAAM,GAAGR,eAAe,CAAC,MAAM;AACjC,UAAMS,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWL,UAAU,GAAG,CAAxB,CAAtB;AACA,UAAMM,aAAa,GAAGN,UAAU,GAAGG,aAAnC;AACA,QAAII,QAAQ,GAAGH,IAAI,CAACC,KAAL,CAAW,CAACN,WAAW,CAACS,KAAb,GAAqBV,QAAhC,CAAf;AACAS,IAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAX,GAAgBA,QAAQ,GAAGV,KAAZ,GAAqBA,KAApC,GAA4CU,QAAvD;AACA,UAAME,aAAa,GAAG,CAClB,CAACF,QAAQ,GAAGD,aAAX,GAA2BT,KAA5B,IAAqCA,KADnB,EAElB,CAACU,QAAQ,GAAG,CAAX,GAAeV,KAAhB,IAAyBA,KAFP,CAAtB;AAIA,UAAMa,aAAa,GAAG,CAClB,CAACH,QAAQ,GAAGV,KAAZ,IAAqBA,KADH,EAElB,CAACU,QAAQ,GAAGJ,aAAX,GAA2BN,KAA5B,IAAqCA,KAFnB,CAAtB;;AAIA,QAAIY,aAAa,CAAC,CAAD,CAAb,GAAmBZ,KAAnB,IAA4BY,aAAa,CAAC,CAAD,CAAb,GAAmBA,aAAa,CAAC,CAAD,CAAhE,EAAqE;AACjEA,MAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBZ,KAAK,GAAG,CAA3B;AACAa,MAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;AACH;;AACD,QAAIA,aAAa,CAAC,CAAD,CAAb,GAAmBA,aAAa,CAAC,CAAD,CAApC,EAAyC;AACrCD,MAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBZ,KAAK,GAAG,CAA3B;AACAa,MAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAnB;AACH;;AACD,WAAO;AAAED,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAP;AACH,GAtB6B,EAsB3B,CAACb,KAAD,EAAQG,UAAR,EAAoBD,WAApB,CAtB2B,CAA9B;AAwBA,SAAOG,MAAP;AACH","sourcesContent":["import type Animated from 'react-native-reanimated';\nimport { useDerivedValue } from 'react-native-reanimated';\n\nexport type IVisibleRanges = Animated.SharedValue<{\n    negativeRange: number[];\n    positiveRange: number[];\n}>;\n\nexport function useVisibleRanges(options: {\n    total: number;\n    viewSize: number;\n    windowSize?: number;\n    translation: Animated.SharedValue<number>;\n}): IVisibleRanges {\n    const {\n        total = 0,\n        viewSize,\n        translation,\n        windowSize: _windowSize = 0,\n    } = options;\n\n    const windowSize = total <= _windowSize ? total : _windowSize;\n\n    const ranges = useDerivedValue(() => {\n        const positiveCount = Math.round(windowSize / 2);\n        const negativeCount = windowSize - positiveCount;\n        let curIndex = Math.round(-translation.value / viewSize);\n        curIndex = curIndex < 0 ? (curIndex % total) + total : curIndex;\n        const negativeRange = [\n            (curIndex - negativeCount + total) % total,\n            (curIndex - 1 + total) % total,\n        ];\n        const positiveRange = [\n            (curIndex + total) % total,\n            (curIndex + positiveCount + total) % total,\n        ];\n        if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n            negativeRange[1] = total - 1;\n            positiveRange[0] = 0;\n        }\n        if (positiveRange[0] > positiveRange[1]) {\n            negativeRange[1] = total - 1;\n            positiveRange[0] = 0;\n        }\n        return { negativeRange, positiveRange };\n    }, [total, windowSize, translation]);\n\n    return ranges;\n}\n"]}