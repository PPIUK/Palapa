{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["React","StyleSheet","PanGestureHandler","Animated","cancelAnimation","runOnJS","useAnimatedGestureHandler","useAnimatedReaction","useDerivedValue","useSharedValue","withDecay","Easing","CTX","dealWithAnimation","IScrollViewGesture","props","vertical","style","data","pagingEnabled","snapEnabled","panGestureHandlerProps","loop","infinite","scrollAnimationDuration","withAnimation","enabled","useContext","translation","size","onScrollBegin","onScrollEnd","onTouchBegin","onTouchEnd","maxPage","length","isHorizontal","touching","scrollEndTranslation","scrollEndVelocity","_withSpring","useCallback","toValue","onFinished","callback","isFinished","defaultWithAnimation","type","config","duration","easing","easeOutQuart","endWithSpring","origin","value","velocity","nextPage","Math","round","deceleration","page","velocityPage","finalPage","min","max","onFinish","activeDecay","resetBoundary","panGestureEventHandler","onStart","_","ctx","validStart","panOffset","onActive","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","onEnd","velocityX","velocityY","directionStyle","useMemo","styles","contentHorizontal","contentVertical","container","children","ScrollViewGesture","create","flex","overflow","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport {\n    PanGestureHandler,\n    PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport Animated, {\n    cancelAnimation,\n    runOnJS,\n    useAnimatedGestureHandler,\n    useAnimatedReaction,\n    useDerivedValue,\n    useSharedValue,\n    withDecay,\n} from 'react-native-reanimated';\nimport { Easing } from './constants';\nimport { CTX } from './store';\nimport type { WithTimingAnimation } from './types';\nimport { dealWithAnimation } from './utils/dealWithAnimation';\n\ntype GestureContext = {\n    validStart: boolean;\n    panOffset: number;\n    max: number;\n};\n\ninterface Props {\n    size: number;\n    infinite?: boolean;\n    onScrollBegin?: () => void;\n    onScrollEnd?: () => void;\n    onTouchBegin?: () => void;\n    onTouchEnd?: () => void;\n    style?: StyleProp<ViewStyle>;\n    translation: Animated.SharedValue<number>;\n}\n\nconst IScrollViewGesture: React.FC<Props> = (props) => {\n    const {\n        props: {\n            vertical,\n            style,\n            data,\n            pagingEnabled,\n            snapEnabled,\n            panGestureHandlerProps,\n            loop: infinite,\n            scrollAnimationDuration,\n            withAnimation,\n            enabled,\n        },\n    } = React.useContext(CTX);\n\n    const {\n        translation,\n        size,\n        onScrollBegin,\n        onScrollEnd,\n        onTouchBegin,\n        onTouchEnd,\n    } = props;\n\n    const maxPage = data.length;\n    const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n    const touching = useSharedValue(false);\n    const scrollEndTranslation = useSharedValue(0);\n    const scrollEndVelocity = useSharedValue(0);\n\n    const _withSpring = React.useCallback(\n        (toValue: number, onFinished?: () => void) => {\n            'worklet';\n            const callback = (isFinished: boolean) => {\n                'worklet';\n                if (isFinished) {\n                    onFinished && runOnJS(onFinished)();\n                }\n            };\n\n            const defaultWithAnimation: WithTimingAnimation = {\n                type: 'timing',\n                config: {\n                    duration: scrollAnimationDuration,\n                    easing: Easing.easeOutQuart,\n                },\n            };\n\n            return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n                toValue,\n                callback\n            );\n        },\n        [scrollAnimationDuration, withAnimation]\n    );\n\n    const endWithSpring = React.useCallback(\n        (onFinished?: () => void) => {\n            'worklet';\n            const origin = translation.value;\n            const velocity = scrollEndVelocity.value;\n            if (!pagingEnabled) {\n                if (snapEnabled) {\n                    const nextPage =\n                        Math.round((origin + velocity * 0.4) / size) * size;\n                    translation.value = _withSpring(nextPage, onFinished);\n                    return;\n                }\n                translation.value = withDecay({\n                    velocity,\n                    deceleration: 0.999,\n                });\n                return;\n            }\n            const page = Math.round(-translation.value / size);\n            const velocityPage = Math.round(\n                -(translation.value + scrollEndVelocity.value) / size\n            );\n            let finalPage = Math.min(\n                page + 1,\n                Math.max(page - 1, velocityPage)\n            );\n            if (!infinite) {\n                finalPage = Math.min(maxPage - 1, Math.max(0, finalPage));\n            }\n\n            translation.value = _withSpring(-finalPage * size, onFinished);\n        },\n        [\n            infinite,\n            _withSpring,\n            translation,\n            scrollEndVelocity,\n            size,\n            maxPage,\n            pagingEnabled,\n            snapEnabled,\n        ]\n    );\n\n    const onFinish = React.useCallback(\n        (isFinished: boolean) => {\n            'worklet';\n            if (isFinished) {\n                touching.value = false;\n                onScrollEnd && runOnJS(onScrollEnd)();\n            }\n        },\n        [onScrollEnd, touching]\n    );\n\n    const activeDecay = React.useCallback(() => {\n        'worklet';\n        touching.value = true;\n        translation.value = withDecay(\n            { velocity: scrollEndVelocity.value },\n            (isFinished) => onFinish(isFinished as boolean)\n        );\n    }, [onFinish, scrollEndVelocity.value, touching, translation]);\n\n    const resetBoundary = React.useCallback(() => {\n        'worklet';\n        if (touching.value) {\n            return;\n        }\n\n        if (translation.value > 0) {\n            if (scrollEndTranslation.value < 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(0);\n                return;\n            }\n        }\n\n        if (translation.value < -((maxPage - 1) * size)) {\n            if (scrollEndTranslation.value > 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(-((maxPage - 1) * size));\n                return;\n            }\n        }\n    }, [\n        touching.value,\n        translation,\n        maxPage,\n        size,\n        scrollEndTranslation.value,\n        infinite,\n        activeDecay,\n        _withSpring,\n    ]);\n\n    useAnimatedReaction(\n        () => translation.value,\n        () => {\n            if (!pagingEnabled) {\n                resetBoundary();\n            }\n        },\n        [pagingEnabled, resetBoundary]\n    );\n\n    const panGestureEventHandler = useAnimatedGestureHandler<\n        PanGestureHandlerGestureEvent,\n        GestureContext\n    >(\n        {\n            onStart: (_, ctx) => {\n                touching.value = true;\n                ctx.validStart = true;\n                onScrollBegin && runOnJS(onScrollBegin)();\n                ctx.max = (maxPage - 1) * size;\n                ctx.panOffset = translation.value;\n            },\n            onActive: (e, ctx) => {\n                if (ctx.validStart) {\n                    ctx.validStart = false;\n                    cancelAnimation(translation);\n                }\n                touching.value = true;\n                const { translationX, translationY } = e;\n                let panTranslation = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                if (\n                    !infinite &&\n                    (translation.value > 0 || translation.value < -ctx.max)\n                ) {\n                    const boundary = translation.value > 0 ? 0 : -ctx.max;\n                    const fixed = boundary - ctx.panOffset;\n                    const dynamic = panTranslation - fixed;\n                    translation.value = boundary + dynamic * 0.5;\n                    return;\n                }\n\n                translation.value = ctx.panOffset + panTranslation;\n            },\n            onEnd: (e) => {\n                const { velocityX, velocityY, translationX, translationY } = e;\n                scrollEndVelocity.value = isHorizontal.value\n                    ? velocityX\n                    : velocityY;\n                scrollEndTranslation.value = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                endWithSpring(onScrollEnd);\n\n                if (!infinite) {\n                    touching.value = false;\n                }\n            },\n        },\n        [\n            pagingEnabled,\n            isHorizontal.value,\n            infinite,\n            maxPage,\n            size,\n            snapEnabled,\n            onScrollBegin,\n            onScrollEnd,\n        ]\n    );\n\n    const directionStyle = React.useMemo(() => {\n        return vertical ? styles.contentHorizontal : styles.contentVertical;\n    }, [vertical]);\n\n    return (\n        <Animated.View\n            style={[styles.container, directionStyle, style]}\n            onTouchStart={onTouchBegin}\n            onTouchEnd={onTouchEnd}\n        >\n            <PanGestureHandler\n                {...panGestureHandlerProps}\n                enabled={enabled}\n                onGestureEvent={panGestureEventHandler}\n            >\n                {props.children}\n            </PanGestureHandler>\n        </Animated.View>\n    );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        overflow: 'hidden',\n    },\n    contentVertical: {\n        flexDirection: 'column',\n    },\n    contentHorizontal: {\n        flexDirection: 'row',\n    },\n});\n"]}