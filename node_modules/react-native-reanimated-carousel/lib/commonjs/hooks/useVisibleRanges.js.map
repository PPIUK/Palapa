{"version":3,"sources":["useVisibleRanges.tsx"],"names":["useVisibleRanges","options","total","viewSize","translation","windowSize","_windowSize","ranges","positiveCount","Math","round","negativeCount","curIndex","value","negativeRange","positiveRange"],"mappings":"mGACA,8DAOO,QAASA,CAAAA,gBAAT,CAA0BC,OAA1B,CAKY,CACf,mBAKIA,OALJ,CACIC,KADJ,CACIA,KADJ,yBACY,CADZ,gBAEIC,QAFJ,CAKIF,OALJ,CAEIE,QAFJ,CAGIC,WAHJ,CAKIH,OALJ,CAGIG,WAHJ,qBAKIH,OALJ,CAIII,UAJJ,CAIgBC,WAJhB,8BAI8B,CAJ9B,qBAOA,GAAMD,CAAAA,UAAU,CAAGH,KAAK,EAAII,WAAT,CAAuBJ,KAAvB,CAA+BI,WAAlD,CAEA,GAAMC,CAAAA,MAAM,CAAG,0EAAsB,CACjC,GAAMC,CAAAA,aAAa,CAAGC,IAAI,CAACC,KAAL,CAAWL,UAAU,CAAG,CAAxB,CAAtB,CACA,GAAMM,CAAAA,aAAa,CAAGN,UAAU,CAAGG,aAAnC,CACA,GAAII,CAAAA,QAAQ,CAAGH,IAAI,CAACC,KAAL,CAAW,CAACN,WAAW,CAACS,KAAb,CAAqBV,QAAhC,CAAf,CACAS,QAAQ,CAAGA,QAAQ,CAAG,CAAX,CAAgBA,QAAQ,CAAGV,KAAZ,CAAqBA,KAApC,CAA4CU,QAAvD,CACA,GAAME,CAAAA,aAAa,CAAG,CAClB,CAACF,QAAQ,CAAGD,aAAX,CAA2BT,KAA5B,EAAqCA,KADnB,CAElB,CAACU,QAAQ,CAAG,CAAX,CAAeV,KAAhB,EAAyBA,KAFP,CAAtB,CAIA,GAAMa,CAAAA,aAAa,CAAG,CAClB,CAACH,QAAQ,CAAGV,KAAZ,EAAqBA,KADH,CAElB,CAACU,QAAQ,CAAGJ,aAAX,CAA2BN,KAA5B,EAAqCA,KAFnB,CAAtB,CAIA,GAAIY,aAAa,CAAC,CAAD,CAAb,CAAmBZ,KAAnB,EAA4BY,aAAa,CAAC,CAAD,CAAb,CAAmBA,aAAa,CAAC,CAAD,CAAhE,CAAqE,CACjEA,aAAa,CAAC,CAAD,CAAb,CAAmBZ,KAAK,CAAG,CAA3B,CACAa,aAAa,CAAC,CAAD,CAAb,CAAmB,CAAnB,CACH,CACD,GAAIA,aAAa,CAAC,CAAD,CAAb,CAAmBA,aAAa,CAAC,CAAD,CAApC,CAAyC,CACrCD,aAAa,CAAC,CAAD,CAAb,CAAmBZ,KAAK,CAAG,CAA3B,CACAa,aAAa,CAAC,CAAD,CAAb,CAAmB,CAAnB,CACH,CACD,MAAO,CAAED,aAAa,CAAbA,aAAF,CAAiBC,aAAa,CAAbA,aAAjB,CAAP,CACH,CAtBc,yBApBKV,UAoBL,aAnBUD,WAmBV,UAnB8BD,QAmB9B,OARID,KAQJ,q4BAsBZ,CAACA,KAAD,CAAQG,UAAR,CAAoBD,WAApB,CAtBY,CAAf,CAwBA,MAAOG,CAAAA,MAAP,CACH","sourcesContent":["import type Animated from 'react-native-reanimated';\nimport { useDerivedValue } from 'react-native-reanimated';\n\nexport type IVisibleRanges = Animated.SharedValue<{\n    negativeRange: number[];\n    positiveRange: number[];\n}>;\n\nexport function useVisibleRanges(options: {\n    total: number;\n    viewSize: number;\n    windowSize?: number;\n    translation: Animated.SharedValue<number>;\n}): IVisibleRanges {\n    const {\n        total = 0,\n        viewSize,\n        translation,\n        windowSize: _windowSize = 0,\n    } = options;\n\n    const windowSize = total <= _windowSize ? total : _windowSize;\n\n    const ranges = useDerivedValue(() => {\n        const positiveCount = Math.round(windowSize / 2);\n        const negativeCount = windowSize - positiveCount;\n        let curIndex = Math.round(-translation.value / viewSize);\n        curIndex = curIndex < 0 ? (curIndex % total) + total : curIndex;\n        const negativeRange = [\n            (curIndex - negativeCount + total) % total,\n            (curIndex - 1 + total) % total,\n        ];\n        const positiveRange = [\n            (curIndex + total) % total,\n            (curIndex + positiveCount + total) % total,\n        ];\n        if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n            negativeRange[1] = total - 1;\n            positiveRange[0] = 0;\n        }\n        if (positiveRange[0] > positiveRange[1]) {\n            negativeRange[1] = total - 1;\n            positiveRange[0] = 0;\n        }\n        return { negativeRange, positiveRange };\n    }, [total, windowSize, translation]);\n\n    return ranges;\n}\n"]}