"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AnimationContainer extends React.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "animation", void 0);

    _defineProperty(this, "animatedValuesByKey", {});

    _defineProperty(this, "interpolationsByKey", {});

    _defineProperty(this, "startAnimation", () => {
      this.animation.start();
    });

    _defineProperty(this, "stopAnimation", () => {
      this.animation.reset();

      for (const key in this.animatedValuesByKey) {
        this.animatedValuesByKey[key].setValue(0);
      }
    });

    const {
      initAnimation
    } = props;
    const animationInitializersByKey = initAnimation();
    const animations = [];

    for (const key in animationInitializersByKey) {
      const animationInitializer = animationInitializersByKey[key];
      const animationValue = new _reactNative.Animated.Value(0);
      this.animatedValuesByKey[key] = animationValue;
      const {
        animation,
        values
      } = animationInitializer(animationValue);
      animations.push(animation);
      this.interpolationsByKey[key] = values;
    }

    if (animations.length === 1) {
      this.animation = animations[0];
    } else {
      this.animation = _reactNative.Animated.parallel(animations);
    }
  }

  componentDidMount() {
    if (this.props.animating) {
      this.startAnimation();
    }
  }

  componentDidUpdate(prevProps) {
    const {
      animating
    } = this.props;

    if (animating !== prevProps.animating) {
      if (animating) {
        this.startAnimation();
      } else {
        this.stopAnimation();
      }
    }
  }

  componentWillUnmount() {
    this.animation.stop();
  }

  render() {
    const {
      children
    } = this.props;
    return children ? children(this.interpolationsByKey) : null;
  }

}

exports.default = AnimationContainer;

_defineProperty(AnimationContainer, "defaultProps", {
  animating: true
});
//# sourceMappingURL=AnimationContainer.js.map