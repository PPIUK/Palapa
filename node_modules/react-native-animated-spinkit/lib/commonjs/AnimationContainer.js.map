{"version":3,"sources":["AnimationContainer.tsx"],"names":["AnimationContainer","React","Component","constructor","props","animation","start","reset","key","animatedValuesByKey","setValue","initAnimation","animationInitializersByKey","animations","animationInitializer","animationValue","Animated","Value","values","push","interpolationsByKey","length","parallel","componentDidMount","animating","startAnimation","componentDidUpdate","prevProps","stopAnimation","componentWillUnmount","stop","render","children"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAee,MAAMA,kBAAN,SAELC,KAAK,CAACC,SAFD,CAEqB;AAelCC,EAAAA,WAAW,CAACC,KAAD,EAAkB;AAC3B,UAAMA,KAAN;;AAD2B;;AAAA,iDAboB,EAapB;;AAAA,iDANzB,EAMyB;;AAAA,4CAyCZ,MAAM;AACrB,WAAKC,SAAL,CAAeC,KAAf;AACD,KA3C4B;;AAAA,2CA6Cb,MAAM;AACpB,WAAKD,SAAL,CAAeE,KAAf;;AAEA,WAAK,MAAMC,GAAX,IAAkB,KAAKC,mBAAvB,EAA4C;AAC1C,aAAKA,mBAAL,CAAyBD,GAAzB,EAA8BE,QAA9B,CAAuC,CAAvC;AACD;AACF,KAnD4B;;AAE3B,UAAM;AAAEC,MAAAA;AAAF,QAAoBP,KAA1B;AAEA,UAAMQ,0BAA0B,GAAGD,aAAa,EAAhD;AACA,UAAME,UAAyC,GAAG,EAAlD;;AAEA,SAAK,MAAML,GAAX,IAAkBI,0BAAlB,EAA8C;AAC5C,YAAME,oBAAoB,GAAGF,0BAA0B,CAACJ,GAAD,CAAvD;AACA,YAAMO,cAAc,GAAG,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CAAvB;AACA,WAAKR,mBAAL,CAAyBD,GAAzB,IAAgCO,cAAhC;AACA,YAAM;AAAEV,QAAAA,SAAF;AAAaa,QAAAA;AAAb,UAAwBJ,oBAAoB,CAACC,cAAD,CAAlD;AACAF,MAAAA,UAAU,CAACM,IAAX,CAAgBd,SAAhB;AACA,WAAKe,mBAAL,CAAyBZ,GAAzB,IAAgCU,MAAhC;AACD;;AAED,QAAIL,UAAU,CAACQ,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAKhB,SAAL,GAAiBQ,UAAU,CAAC,CAAD,CAA3B;AACD,KAFD,MAEO;AACL,WAAKR,SAAL,GAAiBW,sBAASM,QAAT,CAAkBT,UAAlB,CAAjB;AACD;AACF;;AAEDU,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKnB,KAAL,CAAWoB,SAAf,EAA0B;AACxB,WAAKC,cAAL;AACD;AACF;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAsB;AACtC,UAAM;AAAEH,MAAAA;AAAF,QAAgB,KAAKpB,KAA3B;;AAEA,QAAIoB,SAAS,KAAKG,SAAS,CAACH,SAA5B,EAAuC;AACrC,UAAIA,SAAJ,EAAe;AACb,aAAKC,cAAL;AACD,OAFD,MAEO;AACL,aAAKG,aAAL;AACD;AACF;AACF;;AAcDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKxB,SAAL,CAAeyB,IAAf;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAK5B,KAA1B;AACA,WAAO4B,QAAQ,GAAGA,QAAQ,CAAC,KAAKZ,mBAAN,CAAX,GAAwC,IAAvD;AACD;;AA3EiC;;;;gBAFfpB,kB,kBAaG;AACpBwB,EAAAA,SAAS,EAAE;AADS,C","sourcesContent":["import * as React from 'react'\nimport { Animated } from 'react-native'\n\ninterface AnimationNode {\n  animation: Animated.CompositeAnimation\n  values: Animated.AnimatedInterpolation[]\n}\n\nexport interface Props<T extends string> {\n  initAnimation: () => Record<T, (value: Animated.Value) => AnimationNode>\n  children: (\n    interpolationsByKey: Record<T, Animated.AnimatedInterpolation[]>\n  ) => React.ReactNode\n  animating: boolean\n}\n\nexport default class AnimationContainer<\n  T extends string\n> extends React.Component<Props<T>> {\n  animation: Animated.CompositeAnimation\n  animatedValuesByKey: Record<T, Animated.Value> = {} as Record<\n    T,\n    Animated.Value\n  >\n  interpolationsByKey: Record<\n    T,\n    Animated.AnimatedInterpolation[]\n  > = {} as Record<T, Animated.AnimatedInterpolation[]>\n\n  static defaultProps = {\n    animating: true,\n  }\n\n  constructor(props: Props<T>) {\n    super(props)\n    const { initAnimation } = props\n\n    const animationInitializersByKey = initAnimation()\n    const animations: Animated.CompositeAnimation[] = []\n\n    for (const key in animationInitializersByKey) {\n      const animationInitializer = animationInitializersByKey[key]\n      const animationValue = new Animated.Value(0)\n      this.animatedValuesByKey[key] = animationValue\n      const { animation, values } = animationInitializer(animationValue)\n      animations.push(animation)\n      this.interpolationsByKey[key] = values\n    }\n\n    if (animations.length === 1) {\n      this.animation = animations[0]\n    } else {\n      this.animation = Animated.parallel(animations)\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.animating) {\n      this.startAnimation()\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const { animating } = this.props\n\n    if (animating !== prevProps.animating) {\n      if (animating) {\n        this.startAnimation()\n      } else {\n        this.stopAnimation()\n      }\n    }\n  }\n\n  startAnimation = () => {\n    this.animation.start()\n  }\n\n  stopAnimation = () => {\n    this.animation.reset()\n\n    for (const key in this.animatedValuesByKey) {\n      this.animatedValuesByKey[key].setValue(0)\n    }\n  }\n\n  componentWillUnmount() {\n    this.animation.stop()\n  }\n\n  render() {\n    const { children } = this.props\n    return children ? children(this.interpolationsByKey) : null\n  }\n}\n"]}