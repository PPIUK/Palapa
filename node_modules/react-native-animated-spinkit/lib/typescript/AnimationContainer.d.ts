import * as React from 'react';
import { Animated } from 'react-native';
interface AnimationNode {
    animation: Animated.CompositeAnimation;
    values: Animated.AnimatedInterpolation[];
}
export interface Props<T extends string> {
    initAnimation: () => Record<T, (value: Animated.Value) => AnimationNode>;
    children: (interpolationsByKey: Record<T, Animated.AnimatedInterpolation[]>) => React.ReactNode;
    animating: boolean;
}
export default class AnimationContainer<T extends string> extends React.Component<Props<T>> {
    animation: Animated.CompositeAnimation;
    animatedValuesByKey: Record<T, Animated.Value>;
    interpolationsByKey: Record<T, Animated.AnimatedInterpolation[]>;
    static defaultProps: {
        animating: boolean;
    };
    constructor(props: Props<T>);
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props<T>): void;
    startAnimation: () => void;
    stopAnimation: () => void;
    componentWillUnmount(): void;
    render(): {} | null | undefined;
}
export {};
