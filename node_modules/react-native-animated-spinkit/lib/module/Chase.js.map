{"version":3,"sources":["Chase.tsx"],"names":["React","Animated","Easing","defaultProps","AnimationContainer","loop","stagger","Chase","Component","render","size","color","style","animating","hidesWhenStopped","rest","props","circleStyle","position","width","height","backgroundColor","borderRadius","chase","value","values","animation","duration","easing","linear","chaseDot","keyframes","chaseDotBefore","alignItems","justifyContent","opacity","transform","rotate","interpolate","inputRange","outputRange","map","index","translateY","scale"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Animated, Easing } from 'react-native'\nimport { SpinnerProps, defaultProps } from './SpinnerProps'\nimport AnimationContainer from './AnimationContainer'\nimport { loop, stagger } from './utils'\n\nexport default class Chase extends React.Component<SpinnerProps> {\n  static defaultProps = defaultProps\n\n  render() {\n    const {\n      size,\n      color,\n      style,\n      animating,\n      hidesWhenStopped,\n      ...rest\n    } = this.props\n    const circleStyle = {\n      position: 'absolute',\n      width: size / 4,\n      height: size / 4,\n      backgroundColor: color,\n      borderRadius: size / 8,\n    }\n\n    return (\n      <AnimationContainer\n        initAnimation={() => ({\n          chase: (value) => ({\n            values: [value],\n            animation: loop({\n              duration: 2500,\n              easing: Easing.linear,\n              value: value,\n            }),\n          }),\n          chaseDot: (value) =>\n            stagger(100, 6, {\n              duration: 2000,\n              value: value,\n              keyframes: [0, 80, 100],\n            }),\n          chaseDotBefore: (value) =>\n            stagger(100, 6, {\n              duration: 2000,\n              value: value,\n              keyframes: [0, 50, 100],\n            }),\n        })}\n        animating={animating}\n      >\n        {(values) => (\n          <Animated.View\n            style={[\n              {\n                width: size,\n                height: size,\n                alignItems: 'center',\n                justifyContent: 'center',\n                opacity: !animating && hidesWhenStopped ? 0 : 1,\n                transform: [\n                  {\n                    rotate: values.chase[0].interpolate({\n                      inputRange: [0, 100],\n                      outputRange: ['0deg', '360deg'],\n                    }),\n                  },\n                ],\n              },\n              style,\n            ]}\n            {...rest}\n          >\n            {values.chaseDot.map((value, index) => (\n              <Animated.View\n                key={index}\n                style={[\n                  circleStyle,\n                  {\n                    transform: [\n                      {\n                        rotate: value.interpolate({\n                          inputRange: [0, 80, 100],\n                          outputRange: ['0deg', '360deg', '360deg'],\n                        }),\n                      },\n                      { translateY: -size / 2 + size / 8 },\n                      {\n                        scale: values.chaseDotBefore[index].interpolate({\n                          inputRange: [0, 50, 100],\n                          outputRange: [1, 0.4, 1],\n                        }),\n                      },\n                    ],\n                  },\n                ]}\n              />\n            ))}\n          </Animated.View>\n        )}\n      </AnimationContainer>\n    )\n  }\n}\n"]}