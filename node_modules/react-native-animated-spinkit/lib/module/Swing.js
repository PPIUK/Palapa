function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { Animated, Easing } from 'react-native';
import { defaultProps } from './SpinnerProps';
import AnimationContainer from './AnimationContainer';
import { loop } from './utils';
export default class Swing extends React.Component {
  render() {
    const {
      size,
      color,
      style,
      animating,
      hidesWhenStopped,
      ...rest
    } = this.props;
    const circleStyle = {
      width: size * 0.45,
      height: size * 0.45,
      backgroundColor: color,
      borderRadius: size * 0.45 / 2
    };
    return /*#__PURE__*/React.createElement(AnimationContainer, {
      initAnimation: () => ({
        swing: value => ({
          values: [value],
          animation: loop({
            duration: 1800,
            value: value,
            easing: Easing.linear,
            keyframes: [0, 100]
          })
        }),
        swingDot: value => ({
          values: [value],
          animation: loop({
            duration: 2000,
            value: value,
            keyframes: [0, 50, 100]
          })
        })
      }),
      animating: animating
    }, values => /*#__PURE__*/React.createElement(Animated.View, _extends({
      style: [{
        width: size,
        height: size,
        alignItems: 'center',
        justifyContent: 'space-between',
        opacity: !animating && hidesWhenStopped ? 0 : 1,
        transform: [{
          rotate: values.swing[0].interpolate({
            inputRange: [0, 100],
            outputRange: ['0deg', '360deg']
          })
        }]
      }, style]
    }, rest), /*#__PURE__*/React.createElement(Animated.View, {
      style: [circleStyle, {
        transform: [{
          scale: values.swingDot[0].interpolate({
            inputRange: [0, 50, 100],
            outputRange: [0.2, 1, 0.2]
          })
        }]
      }]
    }), /*#__PURE__*/React.createElement(Animated.View, {
      style: [circleStyle, {
        transform: [{
          scale: values.swingDot[0].interpolate({
            inputRange: [0, 50, 100],
            outputRange: [1, 0.2, 1]
          })
        }]
      }]
    })));
  }

}

_defineProperty(Swing, "defaultProps", defaultProps);
//# sourceMappingURL=Swing.js.map