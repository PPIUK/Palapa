function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { Animated, View } from 'react-native';
import { defaultProps } from './SpinnerProps';
import AnimationContainer from './AnimationContainer';
import { stagger } from './utils';
export default class Wave extends React.Component {
  render() {
    const {
      size,
      color,
      style,
      animating,
      hidesWhenStopped,
      ...rest
    } = this.props;
    return /*#__PURE__*/React.createElement(AnimationContainer, {
      initAnimation: () => ({
        wave: value => stagger(100, 5, {
          duration: 1200,
          value: value,
          keyframes: [0, 20, 40, 100]
        })
      }),
      animating: animating
    }, values => /*#__PURE__*/React.createElement(View, _extends({
      style: [{
        width: size,
        height: size,
        justifyContent: 'space-between',
        flexDirection: 'row',
        opacity: !animating && hidesWhenStopped ? 0 : 1
      }, style]
    }, rest), values.wave.map((value, index) => /*#__PURE__*/React.createElement(Animated.View, {
      key: index,
      style: {
        width: size * 0.15,
        backgroundColor: color,
        height: size,
        transform: [{
          scaleY: value.interpolate({
            inputRange: [0, 20, 40, 100],
            outputRange: [0.4, 1, 0.4, 0.4]
          })
        }]
      }
    }))));
  }

}

_defineProperty(Wave, "defaultProps", defaultProps);
//# sourceMappingURL=Wave.js.map