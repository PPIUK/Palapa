{"version":3,"sources":["Wander.tsx"],"names":["React","Animated","View","defaultProps","AnimationContainer","loop","Wander","Component","render","size","color","style","animating","hidesWhenStopped","rest","props","wanderDistance","wander","value","values","animation","duration","keyframes","width","height","opacity","Array","fill","map","_","index","position","transform","rotate","backgroundColor","translateX","interpolate","inputRange","outputRange","translateY","scale"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Animated, View } from 'react-native'\nimport { SpinnerProps, defaultProps } from './SpinnerProps'\nimport AnimationContainer from './AnimationContainer'\nimport { loop } from './utils'\n\nexport default class Wander extends React.Component<SpinnerProps> {\n  static defaultProps = defaultProps\n\n  render() {\n    const {\n      size,\n      color,\n      style,\n      animating,\n      hidesWhenStopped,\n      ...rest\n    } = this.props\n    const wanderDistance = size * 0.75\n\n    return (\n      <AnimationContainer\n        initAnimation={() => ({\n          wander: (value) => ({\n            values: [value],\n            animation: loop({\n              duration: 2000,\n              value: value,\n              keyframes: [0, 25, 50, 75, 100],\n            }),\n          }),\n        })}\n        animating={animating}\n      >\n        {(values) => (\n          <View\n            style={[\n              {\n                width: size,\n                height: size,\n                opacity: !animating && hidesWhenStopped ? 0 : 1,\n              },\n              style,\n            ]}\n            {...rest}\n          >\n            {Array(3)\n              .fill(null)\n              .map((_, index) => (\n                <View\n                  key={index}\n                  style={{\n                    width: size,\n                    height: size,\n                    position: 'absolute',\n                    transform: [\n                      {\n                        rotate: `${index * 90}deg`,\n                      },\n                    ],\n                  }}\n                >\n                  <Animated.View\n                    style={{\n                      width: size / 5,\n                      height: size / 5,\n                      backgroundColor: color,\n                      position: 'absolute',\n                      transform: [\n                        {\n                          translateX: values.wander[0].interpolate({\n                            inputRange: [0, 25, 50, 75, 100],\n                            outputRange: [\n                              0,\n                              wanderDistance,\n                              wanderDistance,\n                              0,\n                              0,\n                            ],\n                          }),\n                        },\n                        {\n                          translateY: values.wander[0].interpolate({\n                            inputRange: [0, 25, 50, 75, 100],\n                            outputRange: [\n                              0,\n                              0,\n                              wanderDistance,\n                              wanderDistance,\n                              0,\n                            ],\n                          }),\n                        },\n                        {\n                          scale: values.wander[0].interpolate({\n                            inputRange: [0, 25, 50, 75, 100],\n                            outputRange:\n                              index % 2 === 0\n                                ? [1, 0.6, 1, 0.6, 1]\n                                : [0.6, 1, 0.6, 1, 0.6],\n                          }),\n                        },\n                        {\n                          rotate: values.wander[0].interpolate({\n                            inputRange: [0, 25, 50, 75, 100],\n                            outputRange: [\n                              '0deg',\n                              '-90deg',\n                              '-180deg',\n                              '-270deg',\n                              '-360deg',\n                            ],\n                          }),\n                        },\n                      ],\n                    }}\n                  />\n                </View>\n              ))}\n          </View>\n        )}\n      </AnimationContainer>\n    )\n  }\n}\n"]}