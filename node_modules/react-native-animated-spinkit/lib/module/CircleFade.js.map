{"version":3,"sources":["CircleFade.tsx"],"names":["React","Animated","View","defaultProps","AnimationContainer","stagger","CircleFade","Component","render","size","color","style","animating","hidesWhenStopped","rest","props","circleStyle","position","width","height","backgroundColor","borderRadius","circleFade","value","duration","keyframes","values","alignItems","justifyContent","opacity","map","index","interpolate","inputRange","outputRange","transform","rotate","translateY","scale"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,cAA/B;AACA,SAAuBC,YAAvB,QAA2C,gBAA3C;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,OAAT,QAAwB,SAAxB;AAEA,eAAe,MAAMC,UAAN,SAAyBN,KAAK,CAACO,SAA/B,CAAuD;AAGpEC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,IADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,SAJI;AAKJC,MAAAA,gBALI;AAMJ,SAAGC;AANC,QAOF,KAAKC,KAPT;AAQA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,QAAQ,EAAE,UADQ;AAElBC,MAAAA,KAAK,EAAET,IAAI,GAAG,IAFI;AAGlBU,MAAAA,MAAM,EAAEV,IAAI,GAAG,IAHG;AAIlBW,MAAAA,eAAe,EAAEV,KAJC;AAKlBW,MAAAA,YAAY,EAAGZ,IAAI,GAAG,IAAR,GAAgB;AALZ,KAApB;AAQA,wBACE,oBAAC,kBAAD;AACE,MAAA,aAAa,EAAE,OAAO;AACpBa,QAAAA,UAAU,EAAGC,KAAD,IACVlB,OAAO,CAAC,GAAD,EAAM,EAAN,EAAU;AACfmB,UAAAA,QAAQ,EAAE,IADK;AAEfD,UAAAA,KAAK,EAAEA,KAFQ;AAGfE,UAAAA,SAAS,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,GAAZ;AAHI,SAAV;AAFW,OAAP,CADjB;AASE,MAAA,SAAS,EAAEb;AATb,OAWIc,MAAD,iBACC,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACL;AACER,QAAAA,KAAK,EAAET,IADT;AAEEU,QAAAA,MAAM,EAAEV,IAFV;AAGEkB,QAAAA,UAAU,EAAE,QAHd;AAIEC,QAAAA,cAAc,EAAE,QAJlB;AAKEC,QAAAA,OAAO,EAAE,CAACjB,SAAD,IAAcC,gBAAd,GAAiC,CAAjC,GAAqC;AALhD,OADK,EAQLF,KARK;AADT,OAWMG,IAXN,GAaGY,MAAM,CAACJ,UAAP,CAAkBQ,GAAlB,CAAsB,CAACP,KAAD,EAAQQ,KAAR,kBACrB,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,KAAK,EAAE,CACLf,WADK,EAEL;AACEa,QAAAA,OAAO,EAAEN,KAAK,CAACS,WAAN,CAAkB;AACzBC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,GAAZ,CADa;AAEzBC,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAFY,SAAlB,CADX;AAKEC,QAAAA,SAAS,EAAE,CACT;AACEC,UAAAA,MAAM,YAAKL,KAAK,GAAG,EAAb;AADR,SADS,EAIT;AAAEM,UAAAA,UAAU,EAAE,CAAC5B,IAAD,GAAQ,CAAR,GAAaA,IAAI,GAAG,IAAR,GAAgB;AAA1C,SAJS,EAKT;AACE6B,UAAAA,KAAK,EAAEf,KAAK,CAACS,WAAN,CAAkB;AACvBC,YAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,GAAZ,CADW;AAEvBC,YAAAA,WAAW,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX,EAAc,GAAd;AAFU,WAAlB;AADT,SALS;AALb,OAFK;AAFT,MADD,CAbH,CAZJ,CADF;AAwDD;;AA5EmE;;gBAAjD5B,U,kBACGH,Y","sourcesContent":["import * as React from 'react'\nimport { Animated, View } from 'react-native'\nimport { SpinnerProps, defaultProps } from './SpinnerProps'\nimport AnimationContainer from './AnimationContainer'\nimport { stagger } from './utils'\n\nexport default class CircleFade extends React.Component<SpinnerProps> {\n  static defaultProps = defaultProps\n\n  render() {\n    const {\n      size,\n      color,\n      style,\n      animating,\n      hidesWhenStopped,\n      ...rest\n    } = this.props\n    const circleStyle = {\n      position: 'absolute',\n      width: size * 0.15,\n      height: size * 0.15,\n      backgroundColor: color,\n      borderRadius: (size * 0.15) / 2,\n    }\n\n    return (\n      <AnimationContainer\n        initAnimation={() => ({\n          circleFade: (value) =>\n            stagger(100, 12, {\n              duration: 1200,\n              value: value,\n              keyframes: [0, 39, 40, 100],\n            }),\n        })}\n        animating={animating}\n      >\n        {(values) => (\n          <View\n            style={[\n              {\n                width: size,\n                height: size,\n                alignItems: 'center',\n                justifyContent: 'center',\n                opacity: !animating && hidesWhenStopped ? 0 : 1,\n              },\n              style,\n            ]}\n            {...rest}\n          >\n            {values.circleFade.map((value, index) => (\n              <Animated.View\n                key={index}\n                style={[\n                  circleStyle,\n                  {\n                    opacity: value.interpolate({\n                      inputRange: [0, 39, 40, 100],\n                      outputRange: [0, 0, 1, 0],\n                    }),\n                    transform: [\n                      {\n                        rotate: `${index * 30}deg`,\n                      },\n                      { translateY: -size / 2 + (size * 0.15) / 2 },\n                      {\n                        scale: value.interpolate({\n                          inputRange: [0, 39, 40, 100],\n                          outputRange: [0.6, 0.6, 1, 0.6],\n                        }),\n                      },\n                    ],\n                  },\n                ]}\n              />\n            ))}\n          </View>\n        )}\n      </AnimationContainer>\n    )\n  }\n}\n"]}