{"version":3,"sources":["utils.ts"],"names":["Easing","Animated","Platform","createKeyframeEasingFunction","keyframes","easing","t","keyframeIndex","length","prev","current","loop","duration","value","bezier","toValue","timing","useNativeDriver","OS","stagger","time","amount","animationConfig","easingFunction","values","Array","fill","map","_","Value","animations","animation","frameDuration","inputRange","numFrames","Math","round","frame","push","index","delayedFrames","outputRange","slice","concat","interpolate"],"mappings":"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","sourcesContent":["import { EasingFunction, Easing, Animated, Platform } from 'react-native'\n\nfunction createKeyframeEasingFunction(\n  keyframes: number[],\n  easing: EasingFunction\n) {\n  return (t: number) => {\n    for (\n      let keyframeIndex = 1;\n      keyframeIndex < keyframes.length;\n      keyframeIndex++\n    ) {\n      if (t < keyframes[keyframeIndex] / 100) {\n        const prev = keyframes[keyframeIndex - 1] / 100\n        const current =\n          (keyframes[keyframeIndex] - keyframes[keyframeIndex - 1]) / 100\n\n        return prev + easing((t - prev) / current) * current\n      }\n    }\n    return t\n  }\n}\n\ninterface AnimationConfig {\n  duration: number\n  value: Animated.Value\n  keyframes?: number[]\n  toValue?: number\n  easing?: EasingFunction\n}\n\nfunction loop({\n  duration,\n  value,\n  keyframes = [0, 100],\n  easing = Easing.bezier(0.42, 0.0, 0.58, 1.0),\n  toValue = 100,\n}: AnimationConfig) {\n  const timing = Animated.timing(value, {\n    duration: duration,\n    easing: createKeyframeEasingFunction(keyframes, easing),\n    toValue: toValue,\n    useNativeDriver: Platform.OS !== 'web',\n  })\n\n  return Animated.loop(timing)\n}\n\nfunction stagger(\n  time: number,\n  amount: number,\n  animationConfig: AnimationConfig\n) {\n  const {\n    duration,\n    value,\n    keyframes = [0, 100],\n    easing = Easing.bezier(0.42, 0.0, 0.58, 1.0),\n    toValue = 100,\n  } = animationConfig\n  const easingFunction = createKeyframeEasingFunction(keyframes, easing)\n\n  if (Platform.OS === 'web') {\n    const values = new Array(amount)\n      .fill(null)\n      .map((_) => new Animated.Value(0))\n\n    const animations = values.map((value) =>\n      loop({\n        value,\n        duration,\n        easing,\n        toValue,\n        keyframes,\n      })\n    )\n\n    const animation = Animated.stagger(time, animations)\n\n    return { animation, values }\n  }\n\n  const timing = Animated.timing(value, {\n    duration: duration,\n    easing: easingFunction,\n    toValue: toValue,\n    useNativeDriver: true,\n  })\n\n  const animation = Animated.loop(timing)\n\n  // React Native only does 60fps\n  // https://github.com/facebook/react-native/blob/d3980dceab90b118cc7f69696967aa7f8d4388d9/Libraries/Animated/src/animations/TimingAnimation.js#L78\n  const frameDuration = 1000.0 / 60.0\n  const inputRange: number[] = []\n  const numFrames = Math.round(animationConfig.duration / frameDuration)\n\n  for (let frame = 0; frame < numFrames; frame++) {\n    inputRange.push(easingFunction(frame / numFrames) * 100)\n  }\n\n  const values = []\n  for (let index = amount - 1; index >= 0; index--) {\n    const delayedFrames = Math.round(\n      ((index * time) / animationConfig.duration) * numFrames\n    )\n    const outputRange = inputRange\n      .slice(delayedFrames)\n      .concat(inputRange.slice(0, delayedFrames))\n\n    const value =\n      index === 0\n        ? animationConfig.value\n        : animationConfig.value.interpolate({ inputRange, outputRange })\n    values.push(value)\n  }\n\n  return { animation, values }\n}\n\nexport { loop, stagger, AnimationConfig }\n"]}