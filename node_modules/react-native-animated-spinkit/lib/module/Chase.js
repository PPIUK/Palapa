function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { Animated, Easing } from 'react-native';
import { defaultProps } from './SpinnerProps';
import AnimationContainer from './AnimationContainer';
import { loop, stagger } from './utils';
export default class Chase extends React.Component {
  render() {
    const {
      size,
      color,
      style,
      animating,
      hidesWhenStopped,
      ...rest
    } = this.props;
    const circleStyle = {
      position: 'absolute',
      width: size / 4,
      height: size / 4,
      backgroundColor: color,
      borderRadius: size / 8
    };
    return /*#__PURE__*/React.createElement(AnimationContainer, {
      initAnimation: () => ({
        chase: value => ({
          values: [value],
          animation: loop({
            duration: 2500,
            easing: Easing.linear,
            value: value
          })
        }),
        chaseDot: value => stagger(100, 6, {
          duration: 2000,
          value: value,
          keyframes: [0, 80, 100]
        }),
        chaseDotBefore: value => stagger(100, 6, {
          duration: 2000,
          value: value,
          keyframes: [0, 50, 100]
        })
      }),
      animating: animating
    }, values => /*#__PURE__*/React.createElement(Animated.View, _extends({
      style: [{
        width: size,
        height: size,
        alignItems: 'center',
        justifyContent: 'center',
        opacity: !animating && hidesWhenStopped ? 0 : 1,
        transform: [{
          rotate: values.chase[0].interpolate({
            inputRange: [0, 100],
            outputRange: ['0deg', '360deg']
          })
        }]
      }, style]
    }, rest), values.chaseDot.map((value, index) => /*#__PURE__*/React.createElement(Animated.View, {
      key: index,
      style: [circleStyle, {
        transform: [{
          rotate: value.interpolate({
            inputRange: [0, 80, 100],
            outputRange: ['0deg', '360deg', '360deg']
          })
        }, {
          translateY: -size / 2 + size / 8
        }, {
          scale: values.chaseDotBefore[index].interpolate({
            inputRange: [0, 50, 100],
            outputRange: [1, 0.4, 1]
          })
        }]
      }]
    }))));
  }

}

_defineProperty(Chase, "defaultProps", defaultProps);
//# sourceMappingURL=Chase.js.map